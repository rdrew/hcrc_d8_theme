{"version":3,"file":"hcrc.css","sources":["hcrc.scss","components/_type.scss","../../node_modules/gerillass/scss/_gerillass.scss","../../node_modules/gerillass/scss/lists/_list-of-anchor-pseudo-classes.scss","../../node_modules/gerillass/scss/lists/_list-of-buttons.scss","../../node_modules/gerillass/scss/lists/_list-of-counter-styles.scss","../../node_modules/gerillass/scss/lists/_list-of-directions.scss","../../node_modules/gerillass/scss/lists/_list-of-length-units.scss","../../node_modules/gerillass/scss/lists/_list-of-text-inputs.scss","../../node_modules/gerillass/scss/maps/_map-for-breakpoints.scss","../../node_modules/gerillass/scss/maps/_map-for-directions.scss","../../node_modules/gerillass/scss/maps/_map-for-font-formats.scss","../../node_modules/gerillass/scss/maps/_map-for-positions.scss","../../node_modules/gerillass/scss/maps/_map-for-smartphones.scss","../../node_modules/gerillass/scss/maps/_map-for-tablets.scss","../../node_modules/gerillass/scss/utilities/_clear-unit.scss","../../node_modules/gerillass/scss/utilities/_clear-whitespace.scss","../../node_modules/gerillass/scss/utilities/_convert-to-em.scss","../../node_modules/gerillass/scss/utilities/_convert-to-number.scss","../../node_modules/gerillass/scss/utilities/_darken.scss","../../node_modules/gerillass/scss/utilities/_font-sizer.scss","../../node_modules/gerillass/scss/utilities/_font-source.scss","../../node_modules/gerillass/scss/utilities/_is-color.scss","../../node_modules/gerillass/scss/utilities/_is-number.scss","../../node_modules/gerillass/scss/utilities/_lighten.scss","../../node_modules/gerillass/scss/utilities/_map-deep-get.scss","../../node_modules/gerillass/scss/utilities/_null.scss","../../node_modules/gerillass/scss/utilities/_pixelify.scss","../../node_modules/gerillass/scss/utilities/_pseudo-selector.scss","../../node_modules/gerillass/scss/utilities/_remify.scss","../../node_modules/gerillass/scss/utilities/_shorthand-property.scss","../../node_modules/gerillass/scss/utilities/_validate-breakpoint.scss","../../node_modules/gerillass/scss/utilities/_validate-length.scss","../../node_modules/gerillass/scss/utilities/_validate-scissors.scss","../../node_modules/gerillass/scss/library/_adaptive.scss","../../node_modules/gerillass/scss/library/_after.scss","../../node_modules/gerillass/scss/library/_all-buttons.scss","../../node_modules/gerillass/scss/library/_all-text-inputs.scss","../../node_modules/gerillass/scss/library/_antialias.scss","../../node_modules/gerillass/scss/library/_background-dots.scss","../../node_modules/gerillass/scss/library/_background-image.scss","../../node_modules/gerillass/scss/library/_background-stripes.scss","../../node_modules/gerillass/scss/library/_before.scss","../../node_modules/gerillass/scss/library/_border-box.scss","../../node_modules/gerillass/scss/library/_border-radius.scss","../../node_modules/gerillass/scss/library/_brand-logo.scss","../../node_modules/gerillass/scss/library/_breakpoint.scss","../../node_modules/gerillass/scss/library/_breakpointer.scss","../../node_modules/gerillass/scss/library/_center.scss","../../node_modules/gerillass/scss/library/_circle.scss","../../node_modules/gerillass/scss/library/_clearfix.scss","../../node_modules/gerillass/scss/library/_columnizer.scss","../../node_modules/gerillass/scss/library/_counter.scss","../../node_modules/gerillass/scss/library/_ellipsis.scss","../../node_modules/gerillass/scss/library/_escape-to-parent.scss","../../node_modules/gerillass/scss/library/_except.scss","../../node_modules/gerillass/scss/library/_font-face.scss","../../node_modules/gerillass/scss/library/_hide.scss","../../node_modules/gerillass/scss/library/_linear-gradient.scss","../../node_modules/gerillass/scss/library/_only.scss","../../node_modules/gerillass/scss/library/_placeholder-shown.scss","../../node_modules/gerillass/scss/library/_placeholder.scss","../../node_modules/gerillass/scss/library/_position.scss","../../node_modules/gerillass/scss/library/_radial-gradient.scss","../../node_modules/gerillass/scss/library/_ratio-box.scss","../../node_modules/gerillass/scss/library/_remove.scss","../../node_modules/gerillass/scss/library/_reset-css.scss","../../node_modules/gerillass/scss/library/_reset-figure.scss","../../node_modules/gerillass/scss/library/_resizable.scss","../../node_modules/gerillass/scss/library/_responsive-image.scss","../../node_modules/gerillass/scss/library/_responsive-video.scss","../../node_modules/gerillass/scss/library/_scissors.scss","../../node_modules/gerillass/scss/library/_screen-agent.scss","../../node_modules/gerillass/scss/library/_sizer.scss","../../node_modules/gerillass/scss/library/_smartphone.scss","../../node_modules/gerillass/scss/library/_sprite.scss","../../node_modules/gerillass/scss/library/_stretched-link.scss","../../node_modules/gerillass/scss/library/_tablet.scss","../../node_modules/gerillass/scss/library/_text-gradient.scss","../../node_modules/gerillass/scss/library/_text-image.scss","../../node_modules/gerillass/scss/library/_text-selection.scss","../../node_modules/gerillass/scss/library/_text-shadow.scss","../../node_modules/gerillass/scss/library/_text-stroke.scss","../../node_modules/gerillass/scss/library/_triangle.scss","../../node_modules/gerillass/scss/_gerillass-prefix.scss","../../node_modules/modularscale-sass/stylesheets/_modularscale.scss","../../node_modules/modularscale-sass/stylesheets/modularscale/_vars.scss","../../node_modules/modularscale-sass/stylesheets/modularscale/_settings.scss","../../node_modules/modularscale-sass/stylesheets/modularscale/_pow.scss","../../node_modules/modularscale-sass/stylesheets/modularscale/_strip-units.scss","../../node_modules/modularscale-sass/stylesheets/modularscale/_sort.scss","../../node_modules/modularscale-sass/stylesheets/modularscale/_target.scss","../../node_modules/modularscale-sass/stylesheets/modularscale/_function.scss","../../node_modules/modularscale-sass/stylesheets/modularscale/_round-px.scss","../../node_modules/modularscale-sass/stylesheets/modularscale/_respond.scss","../../node_modules/modularscale-sass/stylesheets/modularscale/_sugar.scss"],"sourcesContent":["//@format\n@import 'components/type';\n@import 'modularscale';\n","//@format\n@import url('https://fonts.googleapis.com/css2?family=Merriweather+Sans:ital,wght@0,400;0,500;0,700;1,300&family=Merriweather:ital,wght@0,300;0,400;0,700;1,400&display=swap');\n@import 'gerillass';\n@import 'modularscale';\n$serif: 'Merriweather', serif;\n$sans-serif: 'Merriweather Sans', sans-serif;\n$text-colour: #333;\n$modularscale: (\n  base: 1em,\n  ratio: 1.3,\n);\nbody {\n  //background: #000;\n}\nbody {\n  font-family: 'Exo 2', sans-serif;\n  font-family: $sans-serif;\n  font-size: 16px;\n  line-height: 160%;\n  color: #333;\n  overflow-x: hidden;\n  font-weight: 300;\n}\n\n.container {\n  max-width: 1170px;\n}\n.breadcrumb {\n  font-size: ms(-1);\n}\np {\n  margin: 0 0 20px 0;\n  font-family: $serif;\n}\n\nh1,\n.h1 {\n  font-size: ms(3);\n  color: $text-colour;\n}\n\nh2,\n.h2 {\n  font-size: ms(2);\n  color: $text-colour;\n}\n\nh3,\n.h3 {\n  font-size: ms(1);\n  color: $text-colour;\n}\n\nh4,\n.h4 {\n  font-size: ms(1);\n  color: $text-colour;\n}\n.menu-base-theme a,\n.menu-base-theme a:hover,\n.menu-base-theme a:focus,\n.menu-base-theme a:active,\n.menu-base-theme a.highlighted {\n  font-weight: 400;\n}\n.site-branding__name a {\n  font-size: ms(1);\n}\n.upei-logo {\n  @include brand-logo(\n    $width: 150px,\n    $height: 75px,\n    $image-url: '../images/upei-green.svg'\n  );\n}\n","@charset \"UTF-8\";\n\n// https://www.gerillass.com/\n// Copyright 2020 by Halil İbrahim Çakıroğlu\n// Apache License 2.0\n\n@import \"lists/list-of-anchor-pseudo-classes\";\n@import \"lists/list-of-buttons\";\n@import \"lists/list-of-counter-styles\";\n@import \"lists/list-of-directions\";\n@import \"lists/list-of-length-units\";\n@import \"lists/list-of-text-inputs\";\n\n@import \"maps/map-for-breakpoints\";\n@import \"maps/map-for-directions\";\n@import \"maps/map-for-font-formats\";\n@import \"maps/map-for-positions\";\n@import \"maps/map-for-smartphones\";\n@import \"maps/map-for-tablets\";\n\n@import \"utilities/clear-unit\";\n@import \"utilities/clear-whitespace\";\n@import \"utilities/convert-to-em\";\n@import \"utilities/convert-to-number\";\n@import \"utilities/darken\";\n@import \"utilities/font-sizer\";\n@import \"utilities/font-source\";\n@import \"utilities/is-color\";\n@import \"utilities/is-number\";\n@import \"utilities/lighten\";\n@import \"utilities/map-deep-get\";\n@import \"utilities/null\";\n@import \"utilities/pixelify\";\n@import \"utilities/pseudo-selector\";\n@import \"utilities/remify\";\n@import \"utilities/shorthand-property\";\n@import \"utilities/validate-breakpoint\";\n@import \"utilities/validate-length\";\n@import \"utilities/validate-scissors\";\n\n@import \"library/adaptive\";\n@import \"library/after\";\n@import \"library/all-buttons\";\n@import \"library/all-text-inputs\";\n@import \"library/antialias\";\n@import \"library/background-dots\";\n@import \"library/background-image\";\n@import \"library/background-stripes\";\n@import \"library/before\";\n@import \"library/border-box\";\n@import \"library/border-radius\";\n@import \"library/brand-logo\";\n@import \"library/breakpoint\";\n@import \"library/breakpointer\";\n@import \"library/center\";\n@import \"library/circle\";\n@import \"library/clearfix\";\n@import \"library/columnizer\";\n@import \"library/counter\";\n@import \"library/ellipsis\";\n@import \"library/escape-to-parent\";\n@import \"library/except\";\n@import \"library/font-face\";\n@import \"library/hide\";\n@import \"library/linear-gradient\";\n@import \"library/only\";\n@import \"library/placeholder-shown\";\n@import \"library/placeholder\";\n@import \"library/position\";\n@import \"library/radial-gradient\";\n@import \"library/ratio-box\";\n@import \"library/remove\";\n@import \"library/reset-css\";\n@import \"library/reset-figure\";\n@import \"library/resizable\";\n@import \"library/responsive-image\";\n@import \"library/responsive-video\";\n@import \"library/scissors\";\n@import \"library/screen-agent\";\n@import \"library/sizer\";\n@import \"library/smartphone\";\n@import \"library/sprite\";\n@import \"library/stretched-link\";\n@import \"library/tablet\";\n@import \"library/text-gradient\";\n@import \"library/text-image\";\n@import \"library/text-selection\";\n@import \"library/text-shadow\";\n@import \"library/text-stroke\";\n@import \"library/triangle\";\n\n// Import prefixed version of Gerillass\n@import \"gerillass-prefix\";\n\n","@charset \"UTF-8\";\n\n$list-of-anchor-pseudo-classes: (\n  \"link\",\n  \"visited\",\n  \"hover\",\n  \"active\",\n  \"focus\"\n) !default;\n","@charset \"UTF-8\";\n\n$list-of-buttons: (\n  \"button\",\n  \"[type='button']\",\n  \"[type='reset']\",\n  \"[type='submit']\"\n) !default;\n","@charset \"UTF-8\";\n\n$list-of-counter-styles: (\n  \"arabic-indic\",\n  \"armenian\",\n  \"bengali\",\n  \"cambodian\",\n  \"circle\",\n  \"cjk-decimal\",\n  \"cjk-earthly-branch\",\n  \"cjk-heavenly-stem\",\n  \"decimal\",\n  \"decimal-leading-zero\",\n  \"devanagari\",\n  \"disc\",\n  \"disclosure-closed\",\n  \"disclosure-open\",\n  \"ethiopic-numeric\",\n  \"georgian\",\n  \"gujarati\",\n  \"gurmukhi\",\n  \"hebrew\",\n  \"hiragana\",\n  \"hiragana-iroha\",\n  \"japanese-formal\",\n  \"japanese-informal\",\n  \"kannada\",\n  \"katakana\",\n  \"katakana-iroha\",\n  \"khmer\",\n  \"korean-hangul-formal\",\n  \"korean-hanja-formal\",\n  \"korean-hanja-informal\",\n  \"lao\",\n  \"lower-alpha\",\n  \"lower-alpha\",\n  \"lower-armenian\",\n  \"lower-greek\",\n  \"lower-latin\",\n  \"lower-roman\",\n  \"malayalam\",\n  \"mongolian\",\n  \"myanmar\",\n  \"oriya\",\n  \"persian\",\n  \"simp-chinese-formal\",\n  \"simp-chinese-informal\",\n  \"square\",\n  \"tamil\",\n  \"telugu\",\n  \"thai\",\n  \"tibetan\",\n  \"trad-chinese-formal\",\n  \"trad-chinese-informal\",\n  \"upper-alpha\",\n  \"upper-armenian\",\n  \"upper-latin\",\n  \"upper-roman\"\n) !default;\n","@charset \"UTF-8\";\n\n$list-of-directions: (\n  \"top\",\n  \"top-right\",\n  \"right\",\n  \"bottom-right\",\n  \"bottom\",\n  \"bottom-left\",\n  \"left\",\n  \"top-left\"\n) !default;\n","@charset \"UTF-8\";\n\n$list-of-absolute-length-units: (\n  \"cm\",\n  \"mm\",\n  \"Q\",\n  \"in\",\n  \"pc\",\n  \"pt\",\n  \"px\"\n) !default;\n\n$list-of-relative-length-units: (\n  \"em\",\n  \"ex\",\n  \"ch\",\n  \"rem\",\n  \"lh\",\n  \"vw\",\n  \"vh\",\n  \"vmin\",\n  \"vmax\"\n) !default;\n","@charset \"UTF-8\";\n\n$list-of-text-inputs: (\n  \"[type='color']\",\n  \"[type='date']\",\n  \"[type='datetime']\",\n  \"[type='datetime-local']\",\n  \"[type='email']\",\n  \"[type='month']\",\n  \"[type='number']\",\n  \"[type='password']\",\n  \"[type='search']\",\n  \"[type='tel']\",\n  \"[type='text']\",\n  \"[type='time']\",\n  \"[type='url']\",\n  \"[type='week']\",\n  \"input:not([type])\",\n  \"textarea\"\n) !default;\n","@charset \"UTF-8\";\n\n$map-for-breakpoints: (\n  \"xsmall\": 0,\n  \"small\": 576px,\n  \"medium\": 768px,\n  \"large\": 992px,\n  \"xlarge\": 1200px,\n) !default;\n","@charset \"UTF-8\";\n\n$map-for-directions: (\n  \"top\": to top,\n  \"top-right\": to top right,\n  \"right\": to right,\n  \"bottom-right\": to bottom right,\n  \"bottom\": to bottom,\n  \"bottom-left\": to bottom left,\n  \"left\": to left,\n  \"top-left\": to top left,\n) !default;\n","@charset \"UTF-8\";\n\n$map-for-font-formats: (\n  \"eot\": format(\"embedded-opentype\"),\n  \"woff2\": format(\"woff2\"),\n  \"woff\": format(\"woff\"),\n  \"ttf\": format(\"truetype\"),\n  \"svg\": format(\"svg\"),\n) !default;\n","@charset \"UTF-8\";\n\n$map-for-positions: (\n  \"top\": at top,\n  \"top-right\": at top right,\n  \"right\": at right,\n  \"bottom-right\": at bottom right,\n  \"bottom\": at bottom,\n  \"bottom-left\": at bottom left,\n  \"left\": at left,\n  \"top-left\": at top left,\n  \"center\": at center,\n) !default;\n","@charset \"UTF-8\";\n\n$map-for-smartphones: (\n  \"iPhone4\": (\n    width: 320px,\n    height: 480px,\n  ),\n  \"iPhone-SE\": (\n    width: 320px,\n    height: 568px,\n  ),\n  \"iPhone5-SE\": (\n    width: 320px,\n    height: 568px,\n  ),\n  \"iPhone6\": (\n    width: 375px,\n    height: 667px,\n  ),\n  \"iPhone6-Plus\": (\n    width: 414px,\n    height: 736px,\n  ),\n  \"iPhone7\": (\n    width: 375px,\n    height: 667px,\n  ),\n  \"iPhone7-Plus\": (\n    width: 414px,\n    height: 736px,\n  ),\n  \"iPhone8\": (\n    width: 375px,\n    height: 667px,\n  ),\n  \"iPhone8-Plus\": (\n    width: 414px,\n    height: 736px,\n  ),\n  \"iPhone11\": (\n    width: 414px,\n    height: 896px,\n  ),\n  \"iPhone11-Pro\": (\n    width: 375px,\n    height: 812px,\n  ),\n  \"iPhone11-Pro-Max\": (\n    width: 414px,\n    height: 896px,\n  ),\n  \"iPhoneX\": (\n    width: 375px,\n    height: 812px,\n  ),\n  \"Galaxy-S7\": (\n    width: 360px,\n    height: 640px,\n  ),\n  \"Galaxy-S8\": (\n    width: 360px,\n    height: 740px,\n  ),\n  \"Galaxy-S8-Plus\": (\n    width: 360px,\n    height: 740px,\n  ),\n  \"Galaxy-S10\": (\n    width: 360px,\n    height: 760px,\n  ),\n) !default;\n","@charset \"UTF-8\";\n\n$map-for-tablets: (\n  \"iPadMini\": (\n    width: 768px,\n    height: 1024px,\n  ),\n  \"iPad\": (\n    width: 810px,\n    height: 1080px,\n  ),\n  \"iPadAir\": (\n    width: 834px,\n    height: 1112px,\n  ),\n  \"iPadPro\": (\n    width: 1024px,\n    height: 1366px,\n  ),\n  \"Nexus7\": (\n    width: 600px,\n    height: 960px,\n  ),\n  \"Nexus9\": (\n    width: 768px,\n    height: 1024px,\n  ),\n  \"Nexus10\": (\n    width: 800px,\n    height: 1280px,\n  ),\n) !default;\n","@charset \"UTF-8\";\n\n@function __clearUnit($value) {\n  @return $value / ($value * 0 + 1);\n}\n","@charset \"UTF-8\";\n\n@function __clearWhitespace($string) {\n  @while (str-index($string, \" \") != null) {\n    $index: str-index($string, \" \");\n    $string: \"#{str-slice($string, 0, $index - 1)}#{str-slice($string, $index + 1)}\";\n  }\n  @return $string;\n}\n","@charset \"UTF-8\";\n\n@function __convertToEm($value) {\n  $base-value: 16px;\n  $rem-value: $value / $base-value;\n  @return $rem-value + unquote(\"em\");\n}\n","@charset \"UTF-8\";\n\n@function __convertToNumber($value) {\n\n  $string-numerals: \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\";\n  $calc: 0;\n\n  @for $i from 1 through str-length($value) {\n    //Takes every digits in the $value\n    $digit: str-slice($value, $i, $i);\n\n    //Finds the index position of $digit in the $value\n    $index-of-digit: index($string-numerals, $digit);\n\n    // That is because SASS strings are not \"0\" based but \"1\", the index position of every digits will be more by one. Here is the simple calculation to find the actual number.\n    $actual-digit: $index-of-digit - 1;\n\n    // Calculates the actual number.\n    $calc: $calc * 10 + $actual-digit;\n  }\n  @return $calc;\n}\n","@charset \"UTF-8\";\n\n@function __darken($color, $percentage) {\n  @if __isColor($color) {\n    @return mix(black, $color, $percentage);\n  }\n}\n","@charset \"UTF-8\";\n\n@function __fontSizer($size, $time) {\n  @return $size * $time;\n}\n","@charset \"UTF-8\";\n\n@function __fontSource($font-family, $file-path, $file-formats) {\n  $list: ();\n  @if map-has-key($map-for-font-formats, $file-formats) {\n    @if index(eot woff2 woff ttf, $file-formats) {\n      $src-value: url('#{$file-path}.#{if(not index(eot, $file-formats), $file-formats, $file-formats+\"?#iefix\")}')\n        #{map-get($map-for-font-formats, $file-formats)};\n      $list: append($list, $src-value, comma);\n    } @else if index(svg, $file-formats) {\n      $font-family: __clearWhitespace($font-family);\n      $src-value: url('#{$file-path}.#{$file-formats + \"#\" + $font-family}')\n        #{map-get($map-for-font-formats, $file-formats)};\n      $list: append($list, $src-value, comma);\n    }\n  }\n  @return $list;\n}\n","@charset \"UTF-8\";\n\n@function __isColor($value) {\n  $list: ();\n  @for $i from 1 through length($value) {\n    @if type-of(nth($value, $i)) == \"color\" {\n      $list: append($list, nth($value, $i), comma);\n    } @else {\n      @error \"'#{nth($value, $i)}' is not a color value, please replace it with a valid one.\";\n    }\n  }\n  @return $list;\n}\n","@charset \"UTF-8\";\n\n@function __isNumber($value) {\n  @if type-of($value) == \"number\" {\n    @return $value;\n  } @else {\n    @warn \"Please make sure you pass a valid number!\";\n  }\n}\n","@charset \"UTF-8\";\n\n@function __lighten($color, $percentage) {\n  @if __isColor($color) {\n    @return mix(white, $color, $percentage);\n  }\n}\n","@charset \"UTF-8\";\n\n@function __mapDeepGet($map, $keys...) {\n  @each $key in $keys {\n    $map: map-get($map, $key);\n  }\n  @return $map;\n}\n","@charset \"UTF-8\";\n\n@function __null($value, $seperation: comma, $skip: false) {\n  $list: ();\n  @for $i from 1 through length($value) {\n    @if nth($value, $i) == null {\n      $list: append($list, if($skip, null, 0), $seperation);\n    } @else {\n      $list: append($list, nth($value, $i), $seperation);\n    }\n  }\n  @return $list;\n}\n","@charset \"UTF-8\";\n\n// This function checks if the argument has a px unit. If not, it adds a px unit to the end of the argument.\n\n@function __pixelify($value) {\n  @if unit($value) == \"px\" {\n    @return $value;\n  } @else if unit($value) != \"px\" {\n    @return __clearUnit($value) * 1px;\n  } @else if unitless($value) == true {\n    @return $value * 1px;\n  }\n}\n","@charset \"UTF-8\";\n\n@function __pseudoSelector($elements, $pseudo: null) {\n  $list: ();\n  @each $element in $elements {\n    $element: if($pseudo, $element + \":\" + $pseudo, $element);\n    $list: append($list, $element, comma);\n  }\n  @return $list;\n}\n","@charset \"UTF-8\";\n\n@function __remify($value) {\n  $base-value: 16px;\n  $rem-value: $value / $base-value;\n  @return $rem-value * 1rem;\n}\n","@charset \"UTF-8\";\n\n@function __shorthandProperty($value) {\n  @if length($value) == 1 {\n    @return nth($value, 1) nth($value, 1) nth($value, 1) nth($value, 1);\n  } @else if length($value) == 2 {\n    @return nth($value, 1) nth($value, 2) nth($value, 1) nth($value, 2);\n  } @else if length($value) == 3 {\n    @return nth($value, 1) nth($value, 2) nth($value, 3) nth($value, 2);\n  } @else if length($value) == 4 {\n    @return nth($value, 1) nth($value, 2) nth($value, 3) nth($value, 4);\n  } @else if length($value) > 4 {\n    @error \"You've passed #{length($value)} arguments. Please do not pass more than 4.\";\n  }\n}\n","@charset \"UTF-8\";\n\n@function __validateBreakpoint($value) {\n  @for $i from 1 through length($value) {\n    @if map-has-key($map-for-breakpoints, $value) {\n      @return map-get($map-for-breakpoints, nth($value, $i));\n    } @else {\n      @return nth($value, $i);\n    }\n  }\n}\n","@charset \"UTF-8\";\n\n@function __validateLength($value) {\n  $list: (\"auto\", \"inherit\", \"initial\", 0);\n  @if index($list, $value) {\n    @return $value;\n  } @else if type-of($value) == \"number\" and not unitless($value) {\n    @return $value;\n  } @else {\n    @warn \"Please pass some values with unit like `#{$value}px`, `#{$value}em`, or `#{$value}%` etc. or pass one of the following arguments: `auto`, ìnherit`, ìnitial` or `0`.\";\n    @return $value;\n  }\n}\n","@charset \"UTF-8\";\n\n@function __validateScissors($value) {\n  $list: ();\n  @for $i from 1 through length($value) {\n    @if nth($value, $i) == null {\n      $list: append($list, 0px, comma);\n    } @else if unitless(nth($value, $i)) {\n      $pixelified: __pixelify(nth($value, $i));\n      $list: append($list, $pixelified, comma);\n    } @else {\n      $list: append($list, nth($value, $i), comma);\n    }\n  }\n  @return $list;\n}\n","@charset \"UTF-8\";\n\n@mixin adaptive($gutter: 30px) {\n  $actual-breakpoints: map-remove($map-for-breakpoints, \"xsmall\");\n  margin: 0 auto;\n  @each $item, $value in $actual-breakpoints {\n    @media (min-width: #{$value}) {\n      max-width: calc(#{$value} - (#{$gutter} * 2));\n    }\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin after($content: null) {\n  &::after {\n    @if $content == null {\n      @content;\n    } @else if $content != null {\n      $data: str-slice($content, 1, 5);\n      @if $data == \"data-\" {\n        content: attr(#{$content});\n        @content;\n      } @else {\n        content: \"#{$content}\";\n        @content;\n      }\n    }\n  }\n}","@charset \"UTF-8\";\n\n@mixin all-buttons($pseudo: null) {\n  $list: \"hover\", \"focus\", \"active\", \"disabled\";\n  @if not $pseudo {\n    #{$list-of-buttons} {\n      @content;\n    }   \n  } @else if index($list, $pseudo) {\n    $all-buttons: __pseudoSelector($list-of-buttons, $pseudo);\n    #{$all-buttons} {\n      @content;\n    }\n  } @else {\n    @error \"The argument must be `null` or one of the followings: #{quote($list)}.\";\n  }\n}","@charset \"UTF-8\";\n\n@mixin all-text-inputs($pseudo: null) {\n  $list: \"hover\", \"focus\", \"active\", \"invalid\", \"required\", \"disabled\";\n  @if not $pseudo {\n    #{$list-of-text-inputs} {\n      @content;\n    }\n  } @else if index($list, $pseudo) {\n    $all-text-inputs: __pseudoSelector($list-of-text-inputs, $pseudo);\n    #{$all-text-inputs} {\n      @content;\n    }\n  } @else {\n    @error \"The argument must be `null` or one of the followings: #{quote($list)}\";\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin antialias($value: null) {\n  @if not & and $value == null {\n    *,\n    *::before,\n    *::after {\n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;\n    }\n  } @else if & and $value == \"only\" {\n    &,\n    &::before,\n    &::after {\n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;\n    }\n  } @else if & and $value == null {\n    &,\n    &::before,\n    &::after,\n    *,\n    *::before,\n    *::after {\n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;\n    }\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin background-dots(\n  $color: null,\n  $size: 1em,\n  $gutter: $size * 5,\n  $diagonal: true,\n  $image: null\n) {\n  @if not $color {\n    $color: rgba(0, 0, 0, 0.1);\n    @if $diagonal == true {\n      background-image: radial-gradient($color $size, transparent 0),\n        radial-gradient($color $size, transparent 0);\n      background-position: ($gutter / 2) ($gutter / 2),\n        ($gutter * 2) ($gutter * 2);\n    } @else if $diagonal == false {\n      background-image: radial-gradient($color $size, transparent 0);\n      background-position: ($gutter / 2) ($gutter / 2);\n    }\n  } @else if $color {\n    @if $diagonal == true {\n      background-image: radial-gradient(nth($color, 1) $size, transparent 0),\n        radial-gradient(nth($color, length($color)) $size, transparent 0);\n      background-position: ($gutter / 2) ($gutter / 2),\n        ($gutter * 2) ($gutter * 2);\n    } @else if $diagonal == false {\n      background-image: radial-gradient(nth($color, 1) $size, transparent 0);\n      background-position: ($gutter / 2) ($gutter / 2);\n      @if length($color) > 1 {\n        @error \"Please do not pass more than one argument when you disable 'diagonal' property! Simply remove the argument(s) after '#{nth($color, 1)}' to resolve the problem.\";\n      }\n    }\n  }\n  background-size: $gutter $gutter;\n  background-repeat: repeat;\n  @if $image {\n    position: relative;\n    &::before {\n      content: \"\";\n      display: block;\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      top: 0;\n      left: 0;\n      background-image: url(unquote($image));\n      background-repeat: no-repeat;\n      background-position: center;\n      background-size: cover;\n      z-index: -1;\n    }\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin background-image(\n  $image-url: null,\n  $filter-color: null,\n  $filter-direction: null\n) {\n  @if $image-url {\n    @if $filter-color {\n      @if length($filter-color) == 1 {\n        background-image: linear-gradient(to top, $filter-color, $filter-color),\n          url($image-url);\n      } @else if length($filter-color) > 1 {\n        $color-list: ();\n        @for $i from 1 through length($filter-color) {\n          $color-list: append($color-list, nth($filter-color, $i), comma);\n        }\n        @if $filter-direction {\n          @if map-has-key($map-for-directions, $filter-direction) {\n            background-image: linear-gradient(\n                map-get($map-for-directions, $filter-direction),\n                $color-list\n              ),\n              url($image-url);\n          } @else {\n            @if index(\"deg\", unit($filter-direction)) {\n              background-image: linear-gradient($filter-direction, $color-list),\n                url($image-url);\n            } @else {\n              @error \"#{$filter-direction} is a wrong value for the $filter-direction parameter. The value must be either a number followed by the 'deg' unit or one of the following pre-defined values: #{quote(map-keys($map-for-directions))}.\";\n            }\n          }\n        } @else {\n          background-image: linear-gradient(to top, $color-list),\n            url($image-url);\n        }\n      }\n    } @else {\n      background-image: url($image-url);\n    }\n  } @else {\n    position: relative;\n    &::after {\n      content: \"\";\n      display: block;\n      position: absolute;\n      left: 0;\n      top: 0;\n      width: 100%;\n      height: 100%;\n      @if length($filter-color) == 1 {\n        background: $filter-color;\n      } @else if length($filter-color) > 1 {\n        @include gls-linear-gradient(\n          if(not $filter-direction, \"top\", $filter-direction),\n          $filter-color\n        );\n      }\n    }\n    & > * {\n      position: relative;\n      z-index: 1;\n    }\n  }\n  background-position: center center;\n  background-repeat: no-repeat;\n  background-size: cover;\n}\n","@charset \"UTF-8\";\n\n@mixin background-stripes(\n  $color: null,\n  $thickness: 1em,\n  $rotation: -45deg,\n  $image: null\n) {\n  $validate-unit: if(not index(\"deg\", unit($rotation)), $rotation + deg, $rotation);\n  $get-image: if($image, unquote(\", \") + url(unquote($image)), unquote(\"\"));\n  @if not $color {\n    $color: rgba(0, 0, 0, 0.1);\n    background-image: repeating-linear-gradient(\n        $validate-unit,\n        $color 0,\n        $color $thickness,\n        transparent $thickness,\n        transparent $thickness * 2\n      ) + $get-image;\n    @if $image {\n      background-position: center;\n      background-repeat: no-repeat;\n      background-size: cover;\n    }\n  } @else if length($color) == 1 {\n    background-image: repeating-linear-gradient(\n        $validate-unit,\n        $color 0,\n        $color $thickness,\n        transparent $thickness,\n        transparent $thickness * 2\n      ) + $get-image;\n    @if $image {\n      background-position: center;\n      background-repeat: no-repeat;\n      background-size: cover;\n    }\n  } @else if length($color) > 1 {\n    $list: ();\n    @for $i from 1 through length($color) {\n      $index-color: nth($color, $i);\n      $style-rule: $index-color ($thickness * $i) - $thickness, $index-color $thickness * $i;\n      $list: append($list, $style-rule, comma);\n    }\n    background-image: repeating-linear-gradient($validate-unit, $list) + $get-image;\n    @if $image {\n      background-position: center;\n      background-repeat: no-repeat;\n      background-size: cover;\n    }\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin before($content: null) {\n  &::before {\n    @if $content == null {\n      @content;\n    } @else if $content != null {\n      $data: str-slice($content, 1, 5);\n      @if $data == \"data-\" {\n        content: attr(#{$content});\n        @content;\n      } @else {\n        content: \"#{$content}\";\n        @content;\n      }\n    }\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin border-box($value: null) {\n  @if not & and $value == null {\n    *,\n    *::before,\n    *::after {\n      box-sizing: border-box;\n    }\n  } @else if & and $value == \"only\" {\n    &,\n    &::before,\n    &::after {\n      box-sizing: border-box;\n    }\n  } @else if & and $value == null {\n    &,\n    &::before,\n    &::after,\n    *,\n    *::before,\n    *::after {\n      box-sizing: border-box;\n    }\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin border-radius($args...) {\n  $list: join($list-of-directions, (\"cross-left\", \"cross-right\", \"all\"));\n  @if length($args) == 1 {\n    $value: nth($args, 1);\n    border-radius: __null($value, space);\n  } @else if length($args) == 2 {\n    $corner: nth($args, 1);\n    $value: nth($args, 2);\n    @if index($list, $corner) {\n      @if $corner == \"top\" {\n        border-top-left-radius: $value;\n        border-top-right-radius: $value;\n      } @else if $corner == \"top-right\" {\n        border-top-right-radius: $value;\n      } @else if $corner == \"right\" {\n        border-top-right-radius: $value;\n        border-bottom-right-radius: $value;\n      } @else if $corner == \"bottom-right\" {\n        border-bottom-right-radius: $value;\n      } @else if $corner == \"bottom\" {\n        border-bottom-left-radius: $value;\n        border-bottom-right-radius: $value;\n      } @else if $corner == \"bottom-left\" {\n        border-bottom-left-radius: $value;\n      } @else if $corner == \"left\" {\n        border-top-left-radius: $value;\n        border-bottom-left-radius: $value;\n      } @else if $corner == \"top-left\" {\n        border-top-left-radius: $value;\n      } @else if $corner == \"all\" {\n        border-radius: $value;\n      } @else if $corner == \"cross-left\" {\n        border-top-left-radius: $value;\n        border-bottom-right-radius: $value;\n      } @else if $corner == \"cross-right\" {\n        border-top-right-radius: $value;\n        border-bottom-left-radius: $value;\n      }\n    } @else {\n      @error \"Corner value must be one of the followings: #{quote($list)}.\";\n    }\n  } @else if length($args) == 4 {\n    $args: __null($args, space, true);\n    border-top-left-radius: nth($args, 1);\n    border-top-right-radius: nth($args, 2);\n    border-bottom-right-radius: nth($args, 3);\n    border-bottom-left-radius: nth($args, 4);\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin brand-logo($width, $height, $image-url: null) {\n  display: inline-block;\n  position: relative;\n  width: $width;\n  height: $height;\n  @if $image-url {\n    background-image: url($image-url);\n  }\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: 100%;\n  a {\n    display: block;\n    width: 1px;\n    height: 1px;\n    overflow: hidden;\n    text-indent: 100%;\n    @include gls-stretched-link(after);\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin breakpoint($params...) {\n  @if length($params) == 1 {\n    $value: nth($params, 1);\n    @if map-has-key($map-for-breakpoints, $value) {\n      @media (width: map-get($map-for-breakpoints, $value)) {\n        @content;\n      }\n    } @else {\n      @media (width: $value) {\n        @content;\n      }\n    }\n  } @else if length($params) == 2 {\n    @if not index(\"only\" \"min\" \"max\" \"between\", nth($params, 1)) {\n      $start: nth($params, 1);\n      $end: nth($params, 2);\n      @media (min-width: #{__validateBreakpoint($start)}) and (max-width: #{if(map-has-key($map-for-breakpoints, $end), __validateBreakpoint($end) - 1, $end)}) {\n        @content;\n      }\n    } @else {\n      $mode: nth($params, 1);\n      $value: nth($params, 2);\n      @if $mode == \"only\" {\n        @if map-has-key($map-for-breakpoints, $value) {\n          @media (width: map-get($map-for-breakpoints, $value)) {\n            @content;\n          }\n        } @else {\n          @media (width: $value) {\n            @content;\n          }\n        }\n      } @else if $mode == \"min\" {\n        @if map-has-key($map-for-breakpoints, $value) {\n          @media (min-width: map-get($map-for-breakpoints, $value)) {\n            @content;\n          }\n        } @else {\n          @media (min-width: $value) {\n            @content;\n          }\n        }\n      } @else if $mode == \"max\" {\n        @if map-has-key($map-for-breakpoints, $value) {\n          @media (max-width: map-get($map-for-breakpoints, $value)) {\n            @content;\n          }\n        } @else {\n          @media (max-width: $value) {\n            @content;\n          }\n        }\n      } @else if $mode == \"between\" {\n        $start: nth($value, 1);\n        $end: nth($value, 2);\n        @media (min-width: #{__validateBreakpoint($start)}) and (max-width: #{if(map-has-key($map-for-breakpoints, $end), __validateBreakpoint($end) - 1, $end)}) {\n          @content;\n        }\n      }\n    }\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin breakpointer($selector: null) {\n  @if & {\n    &::before {\n      @content;\n      @each $key, $value in $map-for-breakpoints {\n        @media (min-width: #{$value}) {\n          content: \"#{$key}\";\n        }\n      }\n    }\n  } @else {\n    @if $selector {\n      #{$selector}::before {\n        @content;\n        @each $key, $value in $map-for-breakpoints {\n          @media (min-width: #{$value}) {\n            content: \"#{$key}\";\n          }\n        }\n      }\n    } @else {\n      body::before {\n        @content;\n        @each $key, $value in $map-for-breakpoints {\n          @media (min-width: #{$value}) {\n            content: \"#{$key}\";\n          }\n        }\n      }\n    }\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin center($axis: \"both\") {\n  @if $axis == \"both\" or $axis == \"vertical\" {\n    top: 50%;\n  }\n  @if $axis == \"both\" or $axis == \"horizontal\" {\n    left: 50%;\n  }\n  transform: \n    if($axis == \"horizontal\", translateX(-50%), if($axis == \"both\", translateX(-50%), null))\n    if($axis == \"vertical\", translateY(-50%), if($axis == \"both\", translateY(-50%), null))\n  ;\n}\n","@charset \"UTF-8\";\n\n@mixin circle($size) {\n  width: $size;\n  height: $size;\n  display: inline-block;\n  border-radius: 100%;\n}\n","@charset \"UTF-8\";\n\n@mixin clearfix {\n  &::after {\n    content: \"\";\n    display: block;\n    clear: both;\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin columnizer($params...) {\n  $columns: nth($params, 1);\n  $gutter: null;\n  $fill: false;\n  display: flex;\n  flex-wrap: wrap;\n  > * {\n    @if length($params) == 1 {\n      flex: 0 0 calc(100% / #{$columns});\n      margin-bottom: 0;\n      &:not(:last-child) {\n        margin-right: 0;\n      }\n    } @else if length($params) == 2 {\n      @if type-of(nth($params, 2)) == bool {\n        $fill: nth($params, length($params));\n        flex-grow: #{if($fill == true, 1, 0)};\n        flex-shrink: 0;\n        flex-basis: calc(100% / #{$columns});\n        margin-bottom: 0;\n        &:not(:last-child) {\n          margin-right: 0;\n        }\n      } @else if type-of(nth($params, 2)) == number {\n        $gutter: nth($params, length($params));\n        flex-grow: 0;\n        flex-shrink: 0;\n        flex-basis: calc((100% - (#{$columns} - 1) * #{$gutter}) / #{$columns});\n        margin-bottom: $gutter;\n        &:not(:last-child) {\n          margin-right: $gutter;\n        }\n        &:nth-child(#{$columns}n) {\n          margin-right: 0;\n        }\n      }\n    } @else if length($params) == 3 {\n      $gutter: nth($params, 2);\n      $fill: nth($params, length($params));\n      flex-grow: if($fill == true, 1, 0);\n      flex-shrink: 0;\n      flex-basis: calc((100% - (#{$columns} - 1) * #{$gutter}) / #{$columns});\n      margin-bottom: $gutter;\n      &:not(:last-child) {\n        margin-right: $gutter;\n      }\n      &:nth-child(#{$columns}n) {\n        margin-right: 0;\n      }\n    }\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin counter($params...) {\n  $counter: null;\n  $counter-before: null;\n  $counter-after: null;\n\n  @if length($params) == 1 {\n    @if index($list-of-counter-styles, nth($params, 1)) {\n      $counter: nth($params, 1);\n    } @else {\n      $counter-after: nth($params, 1);\n    }\n  } @else if length($params) == 2 {\n    @if index($list-of-counter-styles, nth($params, 1)) {\n      $counter: nth($params, 1);\n      $counter-after: nth($params, 2);\n    } @else if index($list-of-counter-styles, nth($params, 2)) {\n      $counter-before: nth($params, 1);\n      $counter: nth($params, 2);\n    } @else {\n      $counter-before: nth($params, 1);\n      $counter-after: nth($params, 2);\n    }\n  } @else if length($params) == 3 {\n    @if index($list-of-counter-styles, nth($params, 2)) {\n      $counter-before: nth($params, 1);\n      $counter: nth($params, 2);\n      $counter-after: nth($params, 3);\n    }\n  }\n\n  &.counter-start {\n    counter-reset: glsCounter;\n  }\n  &.counter-start .counter-item::before,\n  &.counter-continue .counter-item::before {\n    content: #{if($counter-before, '\"' + $counter-before + '\"' + \" \", null)}counter(\n        glsCounter#{if($counter, \", \" + $counter, null)}\n      )\n      #{if($counter-after, \" \" + '\"' + $counter-after + '\"', null)};\n    counter-increment: glsCounter;\n    @content;\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin ellipsis($width: 100%, $display: inline-block) {\n  display: $display;\n  max-width: $width;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  word-wrap: normal;\n}\n","@charset \"UTF-8\";\n\n@mixin escape-to-parent($selector: null) {\n  @at-root #{$selector}#{&} {\n    @content;\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin except($params...) {\n  @if length($params) == 0 {\n    @error \"Please pass an argument. The argument must be either a negative or positive number or list of numbers. Or pass one of the following predefined string values: 'first', 'last', 'odd', 'even'.\";\n  } @else if length($params) == 1 {\n    $value: nth($params, 1);\n    @if type-of($value) == \"number\" {\n      @if $value < 0 {\n        &:not(:nth-last-of-type(#{$value * -1})) {\n          @content;\n        }\n      } @else {\n        &:not(:nth-of-type(#{$value})) {\n          @content;\n        }\n      }\n    } @else if type-of($value) == \"string\" {\n      @if $value == \"odd\" {\n        &:not(:nth-of-type(odd)) {\n          @content;\n        }\n      } @else if $value == \"even\" {\n        &:not(:nth-of-type(even)) {\n          @content;\n        }\n      } @else if $value == \"first\" {\n        &:not(:first-of-type) {\n          @content;\n        }\n      } @else if $value == \"last\" {\n        &:not(:last-of-type) {\n          @content;\n        }\n      } @else {\n        &:not(#{$value}) {\n          @content;\n        }\n      }\n    }\n  } @else if length($params) > 1 {\n    $items: \"\";\n    @for $i from 1 through length($params) {\n      $items: $items + if(nth($params, $i) < 0, unquote(\":not(:nth-last-of-type(#{nth($params, $i) * -1}))\"), unquote(\":not(:nth-of-type(#{nth($params, $i)}))\"));\n    }\n    &#{$items} {\n      @content;\n    }\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin font-face(\n  $font-family,\n  $file-path,\n  $font-style: normal,\n  $font-weight: 400,\n  $file-formats: eot woff2 woff ttf svg\n) {\n  @if & {\n    @error \"You must call the mixin at the root level of your style sheet, not in the `#{&+'{'+'}'}` selector.\";\n  } @else {\n    \n    $list: ();\n\n    @if index(100 200 300 400 500 600 700 800 900, $font-style) {\n      $font-weight: $font-style;\n      $font-style: normal;\n    } @else if not\n      index(\"normal\" \"italic\" \"oblique\", $font-style) and\n      type-of($font-style) !=\n      \"number\"\n    {\n      $font-style-list: ();\n      @for $i from 1 through length($font-style) {\n        $font-style-list: append($font-style-list, nth($font-style, $i), comma);\n      }\n      @for $i from 1 through length($font-style-list) {\n        @if index(\"eot\" \"woff2\" \"woff\" \"ttf\" \"svg\", nth($font-style-list, $i)) {\n          $file-formats: $font-style-list;\n          $font-style: normal;\n        }\n      }\n    }\n\n    @font-face {\n      font-family: $font-family;\n      @if index($file-formats, eot) {\n        src: url(\"#{$file-path}.eot\");\n      }\n      @for $i from 1 through length($file-formats) {\n        $list: append($list, __fontSource($font-family, $file-path, nth($file-formats, $i)), comma);\n      }\n      src: $list;\n      font-style: $font-style;\n      font-weight: $font-weight;\n      @content;\n    }\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin hide($toggle: \"hide\") {\n  @if $toggle == \"hide\" {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    border: 0;\n    overflow: hidden;\n    clip: rect(1px, 1px, 1px, 1px);\n    clip-path: inset(100%);\n    white-space: nowrap;\n  } @else if $toggle == \"unhide\" {\n    position: static;\n    width: auto;\n    height: auto;\n    overflow: visible;\n    clip: auto;\n    clip-path: none;\n    white-space: inherit;\n  } @else if not index (\"hide\" \"unhide\", $toggle) {\n    @error \"#{$toggle} is not a valid value for the `$toggle` argument. The value must be either `hide` or `unhide`.\";\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin linear-gradient($direction, $colors) {\n  $list: ();\n  @for $i from 1 through length($colors) {\n    $list: append($list, nth($colors, $i), comma);\n  }\n  @if map-has-key($map-for-directions, $direction) {\n    background: linear-gradient(\n      map-get($map-for-directions, $direction),\n      $list\n    );\n  } @else if not map-has-key($map-for-directions, $direction) {\n    @if not index(\"deg\", unit($direction)) {\n      @error \"#{$direction} is a wrong value for the $direction parameter. The value must be eighter a number followed by the 'deg' unit or one of the followings: #{map-keys($map-for-directions)}.\";\n    } @else {\n      background: linear-gradient($direction, $list);\n    }\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin only($params...) {\n  @if length($params) == 0 {\n    @error \"Please pass an argument. The argument must be either a negative or positive number or list of numbers. Or pass one of the following predefined string values: 'first', 'last', 'odd', 'even'.\";\n  } @else if length($params) == 1 {\n    $value: nth($params, 1);\n    @if type-of($value) == \"number\" {\n      @if $value < 0 {\n        &:nth-last-of-type(#{$value * -1}) {\n          @content;\n        }\n      } @else {\n        &:nth-of-type(#{$value}) {\n          @content;\n        }\n      }\n    } @else if type-of($value) == \"string\" {\n      @if $value == \"odd\" {\n        &:nth-of-type(odd) {\n          @content;\n        }\n      } @else if $value == \"even\" {\n        &:nth-of-type(even) {\n          @content;\n        }\n      } @else if $value == \"first\" {\n        &:first-of-type {\n          @content;\n        }\n      } @else if $value == \"last\" {\n        &:last-of-type {\n          @content;\n        }\n      } @else {\n        // For class, id or attribute selectors.\n        &#{$value} {\n          @content;\n        }\n      }\n    }\n  } @else if length($params) > 1 {\n    $list: ();\n    @for $i from 1 through length($params) {\n      $list: append($list, if(nth($params, $i) < 0, unquote(\"&:nth-last-of-type(#{nth($params, $i) * -1})\"), unquote(\"&:nth-of-type(#{nth($params, $i)})\")), comma);\n    }\n    #{$list} {\n      @content;\n    }\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin placeholder-shown {\n  &:placeholder-shown {\n    @content;\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin placeholder {\n  &::-webkit-input-placeholder {\n    @content;\n  }\n  &::-moz-placeholder {\n    @content;\n  }\n  &:-ms-input-placeholder {\n    @content;\n  }\n  &:-moz-placeholder {\n    @content;\n  }\n  &::placeholder {\n    @content;\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin position($position: absolute, $offsets: 0) {\n  $offsets: __shorthandProperty($offsets);\n  $positioning-offsets: (\n    top: nth($offsets, 1),\n    right: nth($offsets, 2),\n    bottom: nth($offsets, 3),\n    left: nth($offsets, 4),\n  );\n  position: $position;\n  @each $offset, $value in $positioning-offsets {\n    @if __validateLength($value) {\n      #{$offset}: $value;\n    }\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin radial-gradient($shape, $position, $colors) {\n  $list: ();\n  $shape: unquote($shape);\n  $position: unquote($position);\n  @for $i from 1 through length($colors) {\n    $list: append($list, nth($colors, $i), comma);\n  }\n  @if map-has-key($map-for-positions, $position) {\n    background: radial-gradient(\n      $shape map-get($map-for-positions, $position),\n      $list\n    );\n  } @else if not map-has-key($map-for-positions, $position) {\n    background: radial-gradient($shape $position, $list);\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin ratio-box($ratio: null) {\n  position: relative;\n  &::before {\n    content: \"\";\n    display: block;\n    @if not $ratio {\n      padding-top: 56.25%;\n    } @else if $ratio {\n      @if type-of($ratio) == string {\n        $width: null;\n        $height: null;\n        @if str-index($ratio, \"/\") {\n          $fslash-index: str-index($ratio, \"/\");\n          $width: __convertToNumber(str-slice($ratio, 1, $fslash-index - 1));\n          $height: __convertToNumber(str-slice($ratio, $fslash-index + 1));\n        } @else if str-index($ratio, \":\") {\n          $colon-index: str-index($ratio, \":\");\n          $width: __convertToNumber(str-slice($ratio, 1, $colon-index - 1));\n          $height: __convertToNumber(str-slice($ratio, $colon-index + 1));\n        }\n        $calc: ($height / $width) * 100;\n        padding-top: #{$calc * 1%};\n      } @else if type-of($ratio) == number {\n        padding-top: (1 / $ratio) * 100%;\n      }\n    }\n  }\n  & > * {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin remove($params...) {\n  @if length($params) == 0 {\n    display: none;\n  } @else if length($params) == 1 {\n    $value: nth($params, 1);\n    @include gls-breakpoint($value) {\n      display: none;\n    }\n  } @else if length($params) == 2 {\n    @if index(\"min\" \"max\", nth($params, 1)) {\n      $mode: nth($params, 1);\n      $value: nth($params, 2);\n      @if $mode == \"min\" {\n        @include gls-breakpoint(min, $value) {\n          display: none;\n        }\n      } @else if $mode == \"max\" {\n        @include gls-breakpoint(max, $value) {\n          display: none;\n        }\n      }\n    } @else {\n      $start: nth($params, 1);\n      $end: nth($params, 2);\n      @include gls-breakpoint($start, $end) {\n        display: none;\n      }\n    }\n  } @else {\n    @error \"Error!\";\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin reset-css {\n    @if & {\n        @error \"Please call the mixin at the root of your style sheet.\";\n    } @else {\n    /* http://meyerweb.com/eric/tools/css/reset/ \n    v2.0 | 20110126\n    License: none (public domain)\n    */\n    html, body, div, span, applet, object, iframe,\n    h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n    a, abbr, acronym, address, big, cite, code,\n    del, dfn, em, img, ins, kbd, q, s, samp,\n    small, strike, strong, sub, sup, tt, var,\n    b, u, i, center,\n    dl, dt, dd, ol, ul, li,\n    fieldset, form, label, legend,\n    table, caption, tbody, tfoot, thead, tr, th, td,\n    article, aside, canvas, details, embed, \n    figure, figcaption, footer, header, hgroup, \n    menu, nav, output, ruby, section, summary,\n    time, mark, audio, video {\n      margin: 0;\n      padding: 0;\n      border: 0;\n      font-size: 100%;\n      font: inherit;\n      vertical-align: baseline;\n    }\n    /* HTML5 display-role reset for older browsers */\n    article, aside, details, figcaption, figure, \n    footer, header, hgroup, menu, main, nav, section {\n      display: block;\n    }\n    body {\n      line-height: 1;\n    }\n    ol, ul {\n      list-style: none;\n    }\n    blockquote, q {\n      quotes: none;\n    }\n    blockquote:before, blockquote:after,\n    q:before, q:after {\n      content: '';\n      content: none;\n    }\n    table {\n      border-collapse: collapse;\n      border-spacing: 0;\n    }\n  }\n}","@charset \"UTF-8\";\n\n@mixin reset-figure {\n  margin: 0;\n  img {\n    @include gls-responsive-image;\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin resizable($direction: both, $overflow: auto) {\n  resize: $direction;\n  overflow: $overflow;\n  max-width: 100%;\n}\n","@charset \"UTF-8\";\n\n@mixin responsive-image {\n  display: block;\n  width: 100%;\n}\n","@charset \"UTF-8\";\n\n@mixin responsive-video($ratio: null) {\n  position: relative;\n  &::before {\n    content: \"\";\n    display: block;\n    @if not $ratio {\n      padding-top: 56.25%;\n    } @else if $ratio {\n      @if type-of($ratio) == string {\n        $width: null;\n        $height: null;\n        @if str-index($ratio, \"/\") {\n          $fslash-index: str-index($ratio, \"/\");\n          $width: __convertToNumber(str-slice($ratio, 1, $fslash-index - 1));\n          $height: __convertToNumber(str-slice($ratio, $fslash-index + 1));\n        } @else if str-index($ratio, \":\") {\n          $colon-index: str-index($ratio, \":\");\n          $width: __convertToNumber(str-slice($ratio, 1, $colon-index - 1));\n          $height: __convertToNumber(str-slice($ratio, $colon-index + 1));\n        }\n        $calc: ($height / $width) * 100;\n        padding-top: #{$calc * 1%};\n      } @else if type-of($ratio) == number {\n        padding-top: (1 / $ratio) * 100%;\n      }\n    }\n  }\n  & > * {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin scissors($corners) {\n  @if length($corners) == 1 {\n    $corners: __validateScissors($corners);\n    clip-path: polygon(\n      0 #{nth($corners, 1)},\n      #{nth($corners, 1)} 0,\n      calc(100% - #{nth($corners, 1)}) 0,\n      100% #{nth($corners, 1)},\n      100% calc(100% - #{nth($corners, 1)}),\n      calc(100% - #{nth($corners, 1)}) 100%,\n      #{nth($corners, 1)} 100%,\n      0 calc(100% - #{nth($corners, 1)})\n    );\n  } @else if length($corners) == 4 {\n    $corners: __validateScissors($corners);\n    clip-path: polygon(\n      0 #{nth($corners, 1)},\n      #{nth($corners, 1)} 0,\n      calc(100% - #{nth($corners, 2)}) 0,\n      100% #{nth($corners, 2)},\n      100% calc(100% - #{nth($corners, 3)}),\n      calc(100% - #{nth($corners, 3)}) 100%,\n      #{nth($corners, 4)} 100%,\n      0 calc(100% - #{nth($corners, 4)})\n    );\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin screen-agent($resolution) {\n  @if $resolution == \"1x\" {\n    @media (min-resolution: 96dpi) {\n      @content;\n    }\n  } @else if $resolution == \"2x\" {\n    @media (min-resolution: 192dpi) {\n      @content;\n    }\n  } @else if $resolution == \"3x\" {\n    @media (min-resolution: 288dpi) {\n      @content;\n    }\n  } @else {\n    @media (min-resolution: #{$resolution}) {\n      @content;\n    }\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin sizer($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n","@charset \"UTF-8\";\n\n@mixin smartphone($device, $orientation: null) {\n  @if map-has-key($map-for-smartphones, $device) {\n    @if $orientation == portrait or $orientation == null {\n      @media only screen \n      and (device-width: __mapDeepGet($map-for-smartphones, $device, 'width')) \n      and (device-height: __mapDeepGet($map-for-smartphones, $device, 'height'))\n      and (orientation: portrait) {\n        @content;\n      }\n    } @else if $orientation == landscape {\n      @media only screen \n      and (device-width: __mapDeepGet($map-for-smartphones, $device, 'height')) \n      and (device-height: __mapDeepGet($map-for-smartphones, $device, 'width'))\n      and (orientation: landscape) {\n        @content;\n      }\n    }\n  } @else {\n    @warn \"#{$device} is a wrong device name! The argument must be one of the followings: #{map-keys($map-for-smartphones)}\";\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin sprite($params...) {\n  @if length($params) == 1 {\n    @if type-of(nth($params, 1)) == \"string\" {\n      $str-length: str-length(nth($params, 1));\n      $str-end: str-slice(nth($params, 1), $str-length - 3);\n      @if index(\".png\" \".jpg\" \".svg\", $str-end) {\n        $image-url: nth($params, 1);\n        display: inline-block;\n        background-image: url($image-url);\n        background-repeat: no-repeat;\n      }\n    } @else {\n      $position: nth($params, 1);\n      background-position: $position;\n    }\n  } @else if length($params) == 2 {\n    $image-url: nth($params, 1);\n    $position: nth($params, 2);\n    display: inline-block;\n    background-image: url($image-url);\n    background-position: $position;\n    background-repeat: no-repeat;\n  }\n  @content;\n}\n","@charset \"UTF-8\";\n\n@mixin stretched-link($value: \"before\") {\n  @if index(\"before\" \"after\", $value) {\n    &#{\"::\" + $value} {\n      content: \"\";\n      position: absolute;\n      pointer-events: auto;\n      background-color: rgba(0, 0, 0, 0);\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      z-index: 1;\n    }\n  } @else {\n    @error \"'#{$value}' is a wrong argument. This mixin accepts 'before' or 'after' as an argument. If you don't pass any argument default it will target the '::before' pseudo-element of the selected element.\";\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin tablet($device, $orientation: null) {\n  @if map-has-key($map-for-tablets, $device) {\n    @if $orientation == portrait or $orientation == null {\n      @media only screen \n      and (device-width: __mapDeepGet($map-for-tablets, $device, 'width')) \n      and (device-height: __mapDeepGet($map-for-tablets, $device, 'height'))\n      and (orientation: portrait) {\n        @content;\n      }\n    } @else if $orientation == landscape {\n      @media only screen \n      and (device-width: __mapDeepGet($map-for-tablets, $device, 'height')) \n      and (device-height: __mapDeepGet($map-for-tablets, $device, 'width'))\n      and (orientation: landscape) {\n        @content;\n      }\n    }\n  } @else {\n    @warn \"#{$device} is a wrong device name! The argument must be one of the followings: #{map-keys($map-for-tablets)}\";\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin text-gradient($direction, $colors) {\n  $list: ();\n  @for $i from 1 through length($colors) {\n    $list: append($list, nth($colors, $i), comma);\n  }\n  @if map-has-key($map-for-directions, $direction) {\n    background: linear-gradient(\n      map-get($map-for-directions, $direction),\n      $list\n    );\n  } @else if not map-has-key($map-for-directions, $direction) {\n    @if not index(\"deg\", unit($direction)) {\n      @error \"#{$direction} is a wrong value for the $direction parameter. The value must be eighter a number followed by the 'deg' unit or one of the followings: #{map-keys($map-for-directions)}.\";\n    } @else {\n      background: linear-gradient($direction, $list);\n    }\n  }\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  color: transparent;\n}\n","@charset \"UTF-8\";\n\n@mixin text-image($image: null) {\n  @if $image {\n    background-image: url($image);\n  }\n  background-size: cover;\n  background-position: center;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  color: transparent;\n}\n","@charset \"UTF-8\";\n\n@mixin text-selection($value: null) {\n  @if not & and $value == null {\n    ::selection {\n      @content;\n    }\n  } @else if & and $value == \"only\" {\n    &::selection {\n      @content;\n    }\n  } @else if & and $value == null {\n    &::selection,\n    *::selection {\n      @content;\n    }\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin text-shadow($params...) {\n  $value: ();\n\n  @for $i from 1 through length($params) {\n    // Takes each items come from $params.\n    $item: nth($params, $i);\n\n    // The first value comes from the $item is direction.\n    // This will be used in the @if, @else statements with $size to control the offset of the shadows.\n    $direction: nth($item, 1);\n\n    // Second value is the color.\n    $color: nth($item, 2);\n\n    // The third value is the actual offset value of the shadows.\n    $size: nth($item, 3);\n\n    // Takes the unit of the $size value to use it later to increment the amount of shadow based on the unit.\n    $sizeUnit: unit($size);\n\n    // The $blur argument is optional. It controls the size of the blur.\n    $blur: null;\n\n    // The $fill argument is optional. This makes shadow fill the gap between the actual text and shadow's end-point. The default value is set to false.\n    $fill: null;\n\n    // Assigns the optional sub-arguments to the actual argument.\n    @if length($item) == 4 and type-of(nth($item, 4)) == number {\n      $blur: nth($item, length($item));\n    } @else if length($item) == 4 and type-of(nth($item, 4)) == bool {\n      $fill: nth($item, length($item));\n    } @else if length($item) == 5 {\n      $blur: nth($item, 4);\n      $fill: nth($item, length($item));\n    }\n\n    // The code below changes the angle of $direction of the shadow based on the predefined values.\n    @if $direction == \"top\" {\n      @if $fill == true {\n        // The __clearUnit(); function is used here due to it is not possible to count $size with a unit. First, it clears the unit from the $size argument and then adds it back again in the @for loop.\n        @for $i from 1 through __clearUnit($size) {\n          $increase: $i * 1 + $sizeUnit;\n          $shadow: 0 -#{$increase} $blur $color;\n          $value: append($value, $shadow, comma);\n        }\n      } @else {\n        $shadow: 0 -#{$size} $blur $color;\n        $value: append($value, $shadow, comma);\n      }\n    } @else if $direction == \"top-left\" {\n      @if $fill == true {\n        @for $i from 1 through __clearUnit($size) {\n          $increase: $i * 1 + $sizeUnit;\n          $shadow: -#{$increase} -#{$increase} $blur $color;\n          $value: append($value, $shadow, comma);\n        }\n      } @else {\n        $shadow: -#{$size} -#{$size} $blur $color;\n        $value: append($value, $shadow, comma);\n      }\n    } @else if $direction == \"top-right\" {\n      @if $fill == true {\n        @for $i from 1 through __clearUnit($size) {\n          $increase: $i * 1 + $sizeUnit;\n          $shadow: #{$increase} -#{$increase} $blur $color;\n          $value: append($value, $shadow, comma);\n        }\n      } @else {\n        $shadow: #{$size} -#{$size} $blur $color;\n        $value: append($value, $shadow, comma);\n      }\n    } @else if $direction == \"bottom\" {\n      @if $fill == true {\n        @for $i from 1 through __clearUnit($size) {\n          $increase: $i * 1 + $sizeUnit;\n          $shadow: 0 #{$increase} $blur $color;\n          $value: append($value, $shadow, comma);\n        }\n      } @else {\n        $shadow: 0 #{$size} $blur $color;\n        $value: append($value, $shadow, comma);\n      }\n    } @else if $direction == \"bottom-left\" {\n      @if $fill == true {\n        @for $i from 1 through __clearUnit($size) {\n          $increase: $i * 1 + $sizeUnit;\n          $shadow: -#{$increase} #{$increase} $blur $color;\n          $value: append($value, $shadow, comma);\n        }\n      } @else {\n        $shadow: -#{$size} #{$size} $blur $color;\n        $value: append($value, $shadow, comma);\n      }\n    } @else if $direction == \"bottom-right\" {\n      @if $fill == true {\n        @for $i from 1 through __clearUnit($size) {\n          $increase: $i * 1 + $sizeUnit;\n          $shadow: #{$increase} #{$increase} $blur $color;\n          $value: append($value, $shadow, comma);\n        }\n      } @else {\n        $shadow: #{$size} #{$size} $blur $color;\n        $value: append($value, $shadow, comma);\n      }\n    } @else if $direction == \"left\" {\n      @if $fill == true {\n        @for $i from 1 through __clearUnit($size) {\n          $increase: $i * 1 + $sizeUnit;\n          $shadow: -#{$increase} 0 $blur $color;\n          $value: append($value, $shadow, comma);\n        }\n      } @else {\n        $shadow: -#{$size} 0 $blur $color;\n        $value: append($value, $shadow, comma);\n      }\n    } @else if $direction == \"right\" {\n      @if $fill == true {\n        @for $i from 1 through __clearUnit($size) {\n          $increase: $i * 1 + $sizeUnit;\n          $shadow: #{$increase} 0 $blur $color;\n          $value: append($value, $shadow, comma);\n        }\n      } @else {\n        $shadow: #{$size} 0 $blur $color;\n        $value: append($value, $shadow, comma);\n      }\n    }\n  }\n  text-shadow: $value;\n}\n","@charset \"UTF-8\";\n\n@mixin text-stroke(\n  $fallback-color: black,\n  $color: transparent,\n  $stroke-color: black,\n  $stroke-width: 1px\n) {\n  color: $fallback-color;\n  -webkit-text-fill-color: $color;\n  -webkit-text-stroke-color: $stroke-color;\n  -webkit-text-stroke-width: $stroke-width;\n}\n","@charset \"UTF-8\";\n\n@mixin triangle($direction: \"bottom\", $color: black, $size: 10px 8px) {\n  @if index($list-of-directions, $direction) {\n    @if __isColor($color){\n      content: \"\";\n      height: 0;\n      width: 0;\n      display: inline-block;\n      border-style: solid;\n      @if $direction == \"top\"{\n        border-color: transparent transparent $color;\n        border-width: 0 (nth($size, 1) / 2) if(length($size) == 2, nth($size, 2), nth($size, 1));\n      } @else if $direction == \"top-right\" {\n        border-color: transparent $color transparent transparent;\n        border-width: 0 nth($size, 1) nth($size, 1) 0;\n      } @else if $direction == \"right\" {\n        border-color: transparent transparent transparent $color;\n        border-width: (if(length($size) == 2, nth($size, 2), nth($size, 1)) / 2) 0 (if(length($size) == 2, nth($size, 2), nth($size, 1)) / 2) nth($size, 1);\n      } @else if $direction == \"bottom-right\" {\n        border-color: transparent transparent $color;\n        border-width: 0 0 nth($size, 1) nth($size, 1);\n      } @else if $direction == \"bottom\" {\n        border-color: $color transparent transparent;\n        border-width: if(length($size) == 2, nth($size, 2), nth($size, 1)) (nth($size, 1) / 2) 0;\n      } @else if $direction == \"bottom-left\" {\n        border-color: transparent transparent transparent $color;\n        border-width: nth($size, 1) 0 0 nth($size, 1);\n      } @else if $direction == \"left\" {\n        border-color: transparent $color transparent transparent;\n        border-width: (if(length($size) == 2, nth($size, 2), nth($size, 1)) / 2) nth($size, 1) (if(length($size) == 2, nth($size, 2), nth($size, 1)) / 2) 0;\n      } @else if $direction == \"top-left\" {\n        border-color: $color transparent transparent;\n        border-width: nth($size, 1) nth($size, 1) 0 0;\n      }\n      @content;\n    }\n  } @else {\n    @error \"The argument for direction must be one of the followings: #{quote($list-of-directions)}\";\n  }\n}\n","@charset \"UTF-8\";\n\n@mixin gls-adaptive($gutter: 30px) {\n  $actual-breakpoints: map-remove($map-for-breakpoints, \"xsmall\");\n  margin: 0 auto;\n  @each $item, $value in $actual-breakpoints {\n    @media (min-width: #{$value}) {\n      max-width: calc(#{$value} - (#{$gutter} * 2));\n    }\n  }\n}\n\n\n\n@mixin gls-after($content: null) {\n  &::after {\n    @if $content == null {\n      @content;\n    } @else if $content != null {\n      $data: str-slice($content, 1, 5);\n      @if $data == \"data-\" {\n        content: attr(#{$content});\n        @content;\n      } @else {\n        content: \"#{$content}\";\n        @content;\n      }\n    }\n  }\n}\n\n\n@mixin gls-all-buttons($pseudo: null) {\n  $list: \"hover\", \"focus\", \"active\", \"disabled\";\n  @if not $pseudo {\n    #{$list-of-buttons} {\n      @content;\n    }   \n  } @else if index($list, $pseudo) {\n    $all-buttons: __pseudoSelector($list-of-buttons, $pseudo);\n    #{$all-buttons} {\n      @content;\n    }\n  } @else {\n    @error \"The argument must be `null` or one of the followings: #{quote($list)}.\";\n  }\n}\n\n\n@mixin gls-all-text-inputs($pseudo: null) {\n  $list: \"hover\", \"focus\", \"active\", \"invalid\", \"required\", \"disabled\";\n  @if not $pseudo {\n    #{$list-of-text-inputs} {\n      @content;\n    }\n  } @else if index($list, $pseudo) {\n    $all-text-inputs: __pseudoSelector($list-of-text-inputs, $pseudo);\n    #{$all-text-inputs} {\n      @content;\n    }\n  } @else {\n    @error \"The argument must be `null` or one of the followings: #{quote($list)}\";\n  }\n}\n\n\n\n@mixin gls-antialias($value: null) {\n  @if not & and $value == null {\n    *,\n    *::before,\n    *::after {\n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;\n    }\n  } @else if & and $value == \"only\" {\n    &,\n    &::before,\n    &::after {\n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;\n    }\n  } @else if & and $value == null {\n    &,\n    &::before,\n    &::after,\n    *,\n    *::before,\n    *::after {\n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;\n    }\n  }\n}\n\n\n\n@mixin gls-background-dots(\n  $color: null,\n  $size: 1em,\n  $gutter: $size * 5,\n  $diagonal: true,\n  $image: null\n) {\n  @if not $color {\n    $color: rgba(0, 0, 0, 0.1);\n    @if $diagonal == true {\n      background-image: radial-gradient($color $size, transparent 0),\n        radial-gradient($color $size, transparent 0);\n      background-position: ($gutter / 2) ($gutter / 2),\n        ($gutter * 2) ($gutter * 2);\n    } @else if $diagonal == false {\n      background-image: radial-gradient($color $size, transparent 0);\n      background-position: ($gutter / 2) ($gutter / 2);\n    }\n  } @else if $color {\n    @if $diagonal == true {\n      background-image: radial-gradient(nth($color, 1) $size, transparent 0),\n        radial-gradient(nth($color, length($color)) $size, transparent 0);\n      background-position: ($gutter / 2) ($gutter / 2),\n        ($gutter * 2) ($gutter * 2);\n    } @else if $diagonal == false {\n      background-image: radial-gradient(nth($color, 1) $size, transparent 0);\n      background-position: ($gutter / 2) ($gutter / 2);\n      @if length($color) > 1 {\n        @error \"Please do not pass more than one argument when you disable 'diagonal' property! Simply remove the argument(s) after '#{nth($color, 1)}' to resolve the problem.\";\n      }\n    }\n  }\n  background-size: $gutter $gutter;\n  background-repeat: repeat;\n  @if $image {\n    position: relative;\n    &::before {\n      content: \"\";\n      display: block;\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      top: 0;\n      left: 0;\n      background-image: url(unquote($image));\n      background-repeat: no-repeat;\n      background-position: center;\n      background-size: cover;\n      z-index: -1;\n    }\n  }\n}\n\n\n\n@mixin gls-background-image(\n  $image-url: null,\n  $filter-color: null,\n  $filter-direction: null\n) {\n  @if $image-url {\n    @if $filter-color {\n      @if length($filter-color) == 1 {\n        background-image: linear-gradient(to top, $filter-color, $filter-color),\n          url($image-url);\n      } @else if length($filter-color) > 1 {\n        $color-list: ();\n        @for $i from 1 through length($filter-color) {\n          $color-list: append($color-list, nth($filter-color, $i), comma);\n        }\n        @if $filter-direction {\n          @if map-has-key($map-for-directions, $filter-direction) {\n            background-image: linear-gradient(\n                map-get($map-for-directions, $filter-direction),\n                $color-list\n              ),\n              url($image-url);\n          } @else {\n            @if index(\"deg\", unit($filter-direction)) {\n              background-image: linear-gradient($filter-direction, $color-list),\n                url($image-url);\n            } @else {\n              @error \"#{$filter-direction} is a wrong value for the $filter-direction parameter. The value must be either a number followed by the 'deg' unit or one of the following pre-defined values: #{quote(map-keys($map-for-directions))}.\";\n            }\n          }\n        } @else {\n          background-image: linear-gradient(to top, $color-list),\n            url($image-url);\n        }\n      }\n    } @else {\n      background-image: url($image-url);\n    }\n  } @else {\n    position: relative;\n    &::after {\n      content: \"\";\n      display: block;\n      position: absolute;\n      left: 0;\n      top: 0;\n      width: 100%;\n      height: 100%;\n      @if length($filter-color) == 1 {\n        background: $filter-color;\n      } @else if length($filter-color) > 1 {\n        @include gls-linear-gradient(\n          if(not $filter-direction, \"top\", $filter-direction),\n          $filter-color\n        );\n      }\n    }\n    & > * {\n      position: relative;\n      z-index: 1;\n    }\n  }\n  background-position: center center;\n  background-repeat: no-repeat;\n  background-size: cover;\n}\n\n\n\n@mixin gls-background-stripes(\n  $color: null,\n  $thickness: 1em,\n  $rotation: -45deg,\n  $image: null\n) {\n  $validate-unit: if(not index(\"deg\", unit($rotation)), $rotation + deg, $rotation);\n  $get-image: if($image, unquote(\", \") + url(unquote($image)), unquote(\"\"));\n  @if not $color {\n    $color: rgba(0, 0, 0, 0.1);\n    background-image: repeating-linear-gradient(\n        $validate-unit,\n        $color 0,\n        $color $thickness,\n        transparent $thickness,\n        transparent $thickness * 2\n      ) + $get-image;\n    @if $image {\n      background-position: center;\n      background-repeat: no-repeat;\n      background-size: cover;\n    }\n  } @else if length($color) == 1 {\n    background-image: repeating-linear-gradient(\n        $validate-unit,\n        $color 0,\n        $color $thickness,\n        transparent $thickness,\n        transparent $thickness * 2\n      ) + $get-image;\n    @if $image {\n      background-position: center;\n      background-repeat: no-repeat;\n      background-size: cover;\n    }\n  } @else if length($color) > 1 {\n    $list: ();\n    @for $i from 1 through length($color) {\n      $index-color: nth($color, $i);\n      $style-rule: $index-color ($thickness * $i) - $thickness, $index-color $thickness * $i;\n      $list: append($list, $style-rule, comma);\n    }\n    background-image: repeating-linear-gradient($validate-unit, $list) + $get-image;\n    @if $image {\n      background-position: center;\n      background-repeat: no-repeat;\n      background-size: cover;\n    }\n  }\n}\n\n\n\n@mixin gls-before($content: null) {\n  &::before {\n    @if $content == null {\n      @content;\n    } @else if $content != null {\n      $data: str-slice($content, 1, 5);\n      @if $data == \"data-\" {\n        content: attr(#{$content});\n        @content;\n      } @else {\n        content: \"#{$content}\";\n        @content;\n      }\n    }\n  }\n}\n\n\n\n@mixin gls-border-box($value: null) {\n  @if not & and $value == null {\n    *,\n    *::before,\n    *::after {\n      box-sizing: border-box;\n    }\n  } @else if & and $value == \"only\" {\n    &,\n    &::before,\n    &::after {\n      box-sizing: border-box;\n    }\n  } @else if & and $value == null {\n    &,\n    &::before,\n    &::after,\n    *,\n    *::before,\n    *::after {\n      box-sizing: border-box;\n    }\n  }\n}\n\n\n\n@mixin gls-border-radius($args...) {\n  $list: join($list-of-directions, (\"cross-left\", \"cross-right\", \"all\"));\n  @if length($args) == 1 {\n    $value: nth($args, 1);\n    border-radius: __null($value, space);\n  } @else if length($args) == 2 {\n    $corner: nth($args, 1);\n    $value: nth($args, 2);\n    @if index($list, $corner) {\n      @if $corner == \"top\" {\n        border-top-left-radius: $value;\n        border-top-right-radius: $value;\n      } @else if $corner == \"top-right\" {\n        border-top-right-radius: $value;\n      } @else if $corner == \"right\" {\n        border-top-right-radius: $value;\n        border-bottom-right-radius: $value;\n      } @else if $corner == \"bottom-right\" {\n        border-bottom-right-radius: $value;\n      } @else if $corner == \"bottom\" {\n        border-bottom-left-radius: $value;\n        border-bottom-right-radius: $value;\n      } @else if $corner == \"bottom-left\" {\n        border-bottom-left-radius: $value;\n      } @else if $corner == \"left\" {\n        border-top-left-radius: $value;\n        border-bottom-left-radius: $value;\n      } @else if $corner == \"top-left\" {\n        border-top-left-radius: $value;\n      } @else if $corner == \"all\" {\n        border-radius: $value;\n      } @else if $corner == \"cross-left\" {\n        border-top-left-radius: $value;\n        border-bottom-right-radius: $value;\n      } @else if $corner == \"cross-right\" {\n        border-top-right-radius: $value;\n        border-bottom-left-radius: $value;\n      }\n    } @else {\n      @error \"Corner value must be one of the followings: #{quote($list)}.\";\n    }\n  } @else if length($args) == 4 {\n    $args: __null($args, space, true);\n    border-top-left-radius: nth($args, 1);\n    border-top-right-radius: nth($args, 2);\n    border-bottom-right-radius: nth($args, 3);\n    border-bottom-left-radius: nth($args, 4);\n  }\n}\n\n\n\n@mixin gls-brand-logo($width, $height, $image-url: null) {\n  display: inline-block;\n  position: relative;\n  width: $width;\n  height: $height;\n  @if $image-url {\n    background-image: url($image-url);\n  }\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: 100%;\n  a {\n    display: block;\n    width: 1px;\n    height: 1px;\n    overflow: hidden;\n    text-indent: 100%;\n    @include gls-stretched-link(after);\n  }\n}\n\n\n\n@mixin gls-breakpoint($params...) {\n  @if length($params) == 1 {\n    $value: nth($params, 1);\n    @if map-has-key($map-for-breakpoints, $value) {\n      @media (width: map-get($map-for-breakpoints, $value)) {\n        @content;\n      }\n    } @else {\n      @media (width: $value) {\n        @content;\n      }\n    }\n  } @else if length($params) == 2 {\n    @if not index(\"only\" \"min\" \"max\" \"between\", nth($params, 1)) {\n      $start: nth($params, 1);\n      $end: nth($params, 2);\n      @media (min-width: #{__validateBreakpoint($start)}) and (max-width: #{if(map-has-key($map-for-breakpoints, $end), __validateBreakpoint($end) - 1, $end)}) {\n        @content;\n      }\n    } @else {\n      $mode: nth($params, 1);\n      $value: nth($params, 2);\n      @if $mode == \"only\" {\n        @if map-has-key($map-for-breakpoints, $value) {\n          @media (width: map-get($map-for-breakpoints, $value)) {\n            @content;\n          }\n        } @else {\n          @media (width: $value) {\n            @content;\n          }\n        }\n      } @else if $mode == \"min\" {\n        @if map-has-key($map-for-breakpoints, $value) {\n          @media (min-width: map-get($map-for-breakpoints, $value)) {\n            @content;\n          }\n        } @else {\n          @media (min-width: $value) {\n            @content;\n          }\n        }\n      } @else if $mode == \"max\" {\n        @if map-has-key($map-for-breakpoints, $value) {\n          @media (max-width: map-get($map-for-breakpoints, $value)) {\n            @content;\n          }\n        } @else {\n          @media (max-width: $value) {\n            @content;\n          }\n        }\n      } @else if $mode == \"between\" {\n        $start: nth($value, 1);\n        $end: nth($value, 2);\n        @media (min-width: #{__validateBreakpoint($start)}) and (max-width: #{if(map-has-key($map-for-breakpoints, $end), __validateBreakpoint($end) - 1, $end)}) {\n          @content;\n        }\n      }\n    }\n  }\n}\n\n\n\n@mixin gls-breakpointer($selector: null) {\n  @if & {\n    &::before {\n      @content;\n      @each $key, $value in $map-for-breakpoints {\n        @media (min-width: #{$value}) {\n          content: \"#{$key}\";\n        }\n      }\n    }\n  } @else {\n    @if $selector {\n      #{$selector}::before {\n        @content;\n        @each $key, $value in $map-for-breakpoints {\n          @media (min-width: #{$value}) {\n            content: \"#{$key}\";\n          }\n        }\n      }\n    } @else {\n      body::before {\n        @content;\n        @each $key, $value in $map-for-breakpoints {\n          @media (min-width: #{$value}) {\n            content: \"#{$key}\";\n          }\n        }\n      }\n    }\n  }\n}\n\n\n\n@mixin gls-center($axis: \"both\") {\n  @if $axis == \"both\" or $axis == \"vertical\" {\n    top: 50%;\n  }\n  @if $axis == \"both\" or $axis == \"horizontal\" {\n    left: 50%;\n  }\n  transform: \n    if($axis == \"horizontal\", translateX(-50%), if($axis == \"both\", translateX(-50%), null))\n    if($axis == \"vertical\", translateY(-50%), if($axis == \"both\", translateY(-50%), null))\n  ;\n}\n\n\n\n@mixin gls-circle($size) {\n  width: $size;\n  height: $size;\n  display: inline-block;\n  border-radius: 100%;\n}\n\n\n\n@mixin gls-clearfix {\n  &::after {\n    content: \"\";\n    display: block;\n    clear: both;\n  }\n}\n\n\n\n@mixin gls-columnizer($params...) {\n  $columns: nth($params, 1);\n  $gutter: null;\n  $fill: false;\n  display: flex;\n  flex-wrap: wrap;\n  > * {\n    @if length($params) == 1 {\n      flex: 0 0 calc(100% / #{$columns});\n      margin-bottom: 0;\n      &:not(:last-child) {\n        margin-right: 0;\n      }\n    } @else if length($params) == 2 {\n      @if type-of(nth($params, 2)) == bool {\n        $fill: nth($params, length($params));\n        flex-grow: #{if($fill == true, 1, 0)};\n        flex-shrink: 0;\n        flex-basis: calc(100% / #{$columns});\n        margin-bottom: 0;\n        &:not(:last-child) {\n          margin-right: 0;\n        }\n      } @else if type-of(nth($params, 2)) == number {\n        $gutter: nth($params, length($params));\n        flex-grow: 0;\n        flex-shrink: 0;\n        flex-basis: calc((100% - (#{$columns} - 1) * #{$gutter}) / #{$columns});\n        margin-bottom: $gutter;\n        &:not(:last-child) {\n          margin-right: $gutter;\n        }\n        &:nth-child(#{$columns}n) {\n          margin-right: 0;\n        }\n      }\n    } @else if length($params) == 3 {\n      $gutter: nth($params, 2);\n      $fill: nth($params, length($params));\n      flex-grow: if($fill == true, 1, 0);\n      flex-shrink: 0;\n      flex-basis: calc((100% - (#{$columns} - 1) * #{$gutter}) / #{$columns});\n      margin-bottom: $gutter;\n      &:not(:last-child) {\n        margin-right: $gutter;\n      }\n      &:nth-child(#{$columns}n) {\n        margin-right: 0;\n      }\n    }\n  }\n}\n\n\n\n@mixin gls-counter($params...) {\n  $counter: null;\n  $counter-before: null;\n  $counter-after: null;\n\n  @if length($params) == 1 {\n    @if index($list-of-counter-styles, nth($params, 1)) {\n      $counter: nth($params, 1);\n    } @else {\n      $counter-after: nth($params, 1);\n    }\n  } @else if length($params) == 2 {\n    @if index($list-of-counter-styles, nth($params, 1)) {\n      $counter: nth($params, 1);\n      $counter-after: nth($params, 2);\n    } @else if index($list-of-counter-styles, nth($params, 2)) {\n      $counter-before: nth($params, 1);\n      $counter: nth($params, 2);\n    } @else {\n      $counter-before: nth($params, 1);\n      $counter-after: nth($params, 2);\n    }\n  } @else if length($params) == 3 {\n    @if index($list-of-counter-styles, nth($params, 2)) {\n      $counter-before: nth($params, 1);\n      $counter: nth($params, 2);\n      $counter-after: nth($params, 3);\n    }\n  }\n\n  &.counter-start {\n    counter-reset: glsCounter;\n  }\n  &.counter-start .counter-item::before,\n  &.counter-continue .counter-item::before {\n    content: #{if($counter-before, '\"' + $counter-before + '\"' + \" \", null)}counter(\n        glsCounter#{if($counter, \", \" + $counter, null)}\n      )\n      #{if($counter-after, \" \" + '\"' + $counter-after + '\"', null)};\n    counter-increment: glsCounter;\n    @content;\n  }\n}\n\n\n\n@mixin gls-ellipsis($width: 100%, $display: inline-block) {\n  display: $display;\n  max-width: $width;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  word-wrap: normal;\n}\n\n\n\n@mixin gls-escape-to-parent($selector: null) {\n  @at-root #{$selector}#{&} {\n    @content;\n  }\n}\n\n\n\n@mixin gls-except($params...) {\n  @if length($params) == 0 {\n    @error \"Please pass an argument. The argument must be either a negative or positive number or list of numbers. Or pass one of the following predefined string values: 'first', 'last', 'odd', 'even'.\";\n  } @else if length($params) == 1 {\n    $value: nth($params, 1);\n    @if type-of($value) == \"number\" {\n      @if $value < 0 {\n        &:not(:nth-last-of-type(#{$value * -1})) {\n          @content;\n        }\n      } @else {\n        &:not(:nth-of-type(#{$value})) {\n          @content;\n        }\n      }\n    } @else if type-of($value) == \"string\" {\n      @if $value == \"odd\" {\n        &:not(:nth-of-type(odd)) {\n          @content;\n        }\n      } @else if $value == \"even\" {\n        &:not(:nth-of-type(even)) {\n          @content;\n        }\n      } @else if $value == \"first\" {\n        &:not(:first-of-type) {\n          @content;\n        }\n      } @else if $value == \"last\" {\n        &:not(:last-of-type) {\n          @content;\n        }\n      } @else {\n        &:not(#{$value}) {\n          @content;\n        }\n      }\n    }\n  } @else if length($params) > 1 {\n    $items: \"\";\n    @for $i from 1 through length($params) {\n      $items: $items + if(nth($params, $i) < 0, unquote(\":not(:nth-last-of-type(#{nth($params, $i) * -1}))\"), unquote(\":not(:nth-of-type(#{nth($params, $i)}))\"));\n    }\n    &#{$items} {\n      @content;\n    }\n  }\n}\n\n\n\n@mixin gls-font-face(\n  $font-family,\n  $file-path,\n  $font-style: normal,\n  $font-weight: 400,\n  $file-formats: eot woff2 woff ttf svg\n) {\n  @if & {\n    @error \"You must call the mixin at the root level of your style sheet, not in the `#{&+'{'+'}'}` selector.\";\n  } @else {\n    \n    $list: ();\n\n    @if index(100 200 300 400 500 600 700 800 900, $font-style) {\n      $font-weight: $font-style;\n      $font-style: normal;\n    } @else if not\n      index(\"normal\" \"italic\" \"oblique\", $font-style) and\n      type-of($font-style) !=\n      \"number\"\n    {\n      $font-style-list: ();\n      @for $i from 1 through length($font-style) {\n        $font-style-list: append($font-style-list, nth($font-style, $i), comma);\n      }\n      @for $i from 1 through length($font-style-list) {\n        @if index(\"eot\" \"woff2\" \"woff\" \"ttf\" \"svg\", nth($font-style-list, $i)) {\n          $file-formats: $font-style-list;\n          $font-style: normal;\n        }\n      }\n    }\n\n    @font-face {\n      font-family: $font-family;\n      @if index($file-formats, eot) {\n        src: url(\"#{$file-path}.eot\");\n      }\n      @for $i from 1 through length($file-formats) {\n        $list: append($list, __fontSource($font-family, $file-path, nth($file-formats, $i)), comma);\n      }\n      src: $list;\n      font-style: $font-style;\n      font-weight: $font-weight;\n      @content;\n    }\n  }\n}\n\n\n\n@mixin gls-hide($toggle: \"hide\") {\n  @if $toggle == \"hide\" {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    border: 0;\n    overflow: hidden;\n    clip: rect(1px, 1px, 1px, 1px);\n    clip-path: inset(100%);\n    white-space: nowrap;\n  } @else if $toggle == \"unhide\" {\n    position: static;\n    width: auto;\n    height: auto;\n    overflow: visible;\n    clip: auto;\n    clip-path: none;\n    white-space: inherit;\n  } @else if not index (\"hide\" \"unhide\", $toggle) {\n    @error \"#{$toggle} is not a valid value for the `$toggle` argument. The value must be either `hide` or `unhide`.\";\n  }\n}\n\n\n\n@mixin gls-linear-gradient($direction, $colors) {\n  $list: ();\n  @for $i from 1 through length($colors) {\n    $list: append($list, nth($colors, $i), comma);\n  }\n  @if map-has-key($map-for-directions, $direction) {\n    background: linear-gradient(\n      map-get($map-for-directions, $direction),\n      $list\n    );\n  } @else if not map-has-key($map-for-directions, $direction) {\n    @if not index(\"deg\", unit($direction)) {\n      @error \"#{$direction} is a wrong value for the $direction parameter. The value must be eighter a number followed by the 'deg' unit or one of the followings: #{map-keys($map-for-directions)}.\";\n    } @else {\n      background: linear-gradient($direction, $list);\n    }\n  }\n}\n\n\n\n@mixin gls-only($params...) {\n  @if length($params) == 0 {\n    @error \"Please pass an argument. The argument must be either a negative or positive number or list of numbers. Or pass one of the following predefined string values: 'first', 'last', 'odd', 'even'.\";\n  } @else if length($params) == 1 {\n    $value: nth($params, 1);\n    @if type-of($value) == \"number\" {\n      @if $value < 0 {\n        &:nth-last-of-type(#{$value * -1}) {\n          @content;\n        }\n      } @else {\n        &:nth-of-type(#{$value}) {\n          @content;\n        }\n      }\n    } @else if type-of($value) == \"string\" {\n      @if $value == \"odd\" {\n        &:nth-of-type(odd) {\n          @content;\n        }\n      } @else if $value == \"even\" {\n        &:nth-of-type(even) {\n          @content;\n        }\n      } @else if $value == \"first\" {\n        &:first-of-type {\n          @content;\n        }\n      } @else if $value == \"last\" {\n        &:last-of-type {\n          @content;\n        }\n      } @else {\n        // For class, id or attribute selectors.\n        &#{$value} {\n          @content;\n        }\n      }\n    }\n  } @else if length($params) > 1 {\n    $list: ();\n    @for $i from 1 through length($params) {\n      $list: append($list, if(nth($params, $i) < 0, unquote(\"&:nth-last-of-type(#{nth($params, $i) * -1})\"), unquote(\"&:nth-of-type(#{nth($params, $i)})\")), comma);\n    }\n    #{$list} {\n      @content;\n    }\n  }\n}\n\n\n\n@mixin gls-placeholder-shown {\n  &:placeholder-shown {\n    @content;\n  }\n}\n\n\n\n@mixin gls-placeholder {\n  &::-webkit-input-placeholder {\n    @content;\n  }\n  &::-moz-placeholder {\n    @content;\n  }\n  &:-ms-input-placeholder {\n    @content;\n  }\n  &:-moz-placeholder {\n    @content;\n  }\n  &::placeholder {\n    @content;\n  }\n}\n\n\n\n@mixin gls-position($position: absolute, $offsets: 0) {\n  $offsets: __shorthandProperty($offsets);\n  $positioning-offsets: (\n    top: nth($offsets, 1),\n    right: nth($offsets, 2),\n    bottom: nth($offsets, 3),\n    left: nth($offsets, 4),\n  );\n  position: $position;\n  @each $offset, $value in $positioning-offsets {\n    @if __validateLength($value) {\n      #{$offset}: $value;\n    }\n  }\n}\n\n\n\n@mixin gls-radial-gradient($shape, $position, $colors) {\n  $list: ();\n  $shape: unquote($shape);\n  $position: unquote($position);\n  @for $i from 1 through length($colors) {\n    $list: append($list, nth($colors, $i), comma);\n  }\n  @if map-has-key($map-for-positions, $position) {\n    background: radial-gradient(\n      $shape map-get($map-for-positions, $position),\n      $list\n    );\n  } @else if not map-has-key($map-for-positions, $position) {\n    background: radial-gradient($shape $position, $list);\n  }\n}\n\n\n\n@mixin gls-ratio-box($ratio: null) {\n  position: relative;\n  &::before {\n    content: \"\";\n    display: block;\n    @if not $ratio {\n      padding-top: 56.25%;\n    } @else if $ratio {\n      @if type-of($ratio) == string {\n        $width: null;\n        $height: null;\n        @if str-index($ratio, \"/\") {\n          $fslash-index: str-index($ratio, \"/\");\n          $width: __convertToNumber(str-slice($ratio, 1, $fslash-index - 1));\n          $height: __convertToNumber(str-slice($ratio, $fslash-index + 1));\n        } @else if str-index($ratio, \":\") {\n          $colon-index: str-index($ratio, \":\");\n          $width: __convertToNumber(str-slice($ratio, 1, $colon-index - 1));\n          $height: __convertToNumber(str-slice($ratio, $colon-index + 1));\n        }\n        $calc: ($height / $width) * 100;\n        padding-top: #{$calc * 1%};\n      } @else if type-of($ratio) == number {\n        padding-top: (1 / $ratio) * 100%;\n      }\n    }\n  }\n  & > * {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n  }\n}\n\n\n\n@mixin gls-remove($params...) {\n  @if length($params) == 0 {\n    display: none;\n  } @else if length($params) == 1 {\n    $value: nth($params, 1);\n    @include gls-breakpoint($value) {\n      display: none;\n    }\n  } @else if length($params) == 2 {\n    @if index(\"min\" \"max\", nth($params, 1)) {\n      $mode: nth($params, 1);\n      $value: nth($params, 2);\n      @if $mode == \"min\" {\n        @include gls-breakpoint(min, $value) {\n          display: none;\n        }\n      } @else if $mode == \"max\" {\n        @include gls-breakpoint(max, $value) {\n          display: none;\n        }\n      }\n    } @else {\n      $start: nth($params, 1);\n      $end: nth($params, 2);\n      @include gls-breakpoint($start, $end) {\n        display: none;\n      }\n    }\n  } @else {\n    @error \"Error!\";\n  }\n}\n\n\n\n@mixin gls-reset-css {\n    @if & {\n        @error \"Please call the mixin at the root of your style sheet.\";\n    } @else {\n    /* http://meyerweb.com/eric/tools/css/reset/ \n    v2.0 | 20110126\n    License: none (public domain)\n    */\n    html, body, div, span, applet, object, iframe,\n    h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n    a, abbr, acronym, address, big, cite, code,\n    del, dfn, em, img, ins, kbd, q, s, samp,\n    small, strike, strong, sub, sup, tt, var,\n    b, u, i, center,\n    dl, dt, dd, ol, ul, li,\n    fieldset, form, label, legend,\n    table, caption, tbody, tfoot, thead, tr, th, td,\n    article, aside, canvas, details, embed, \n    figure, figcaption, footer, header, hgroup, \n    menu, nav, output, ruby, section, summary,\n    time, mark, audio, video {\n      margin: 0;\n      padding: 0;\n      border: 0;\n      font-size: 100%;\n      font: inherit;\n      vertical-align: baseline;\n    }\n    /* HTML5 display-role reset for older browsers */\n    article, aside, details, figcaption, figure, \n    footer, header, hgroup, menu, main, nav, section {\n      display: block;\n    }\n    body {\n      line-height: 1;\n    }\n    ol, ul {\n      list-style: none;\n    }\n    blockquote, q {\n      quotes: none;\n    }\n    blockquote:before, blockquote:after,\n    q:before, q:after {\n      content: '';\n      content: none;\n    }\n    table {\n      border-collapse: collapse;\n      border-spacing: 0;\n    }\n  }\n}\n\n\n@mixin gls-reset-figure {\n  margin: 0;\n  img {\n    @include gls-responsive-image;\n  }\n}\n\n\n\n@mixin gls-resizable($direction: both, $overflow: auto) {\n  resize: $direction;\n  overflow: $overflow;\n  max-width: 100%;\n}\n\n\n\n@mixin gls-responsive-image {\n  display: block;\n  width: 100%;\n}\n\n\n\n@mixin gls-responsive-video($ratio: null) {\n  position: relative;\n  &::before {\n    content: \"\";\n    display: block;\n    @if not $ratio {\n      padding-top: 56.25%;\n    } @else if $ratio {\n      @if type-of($ratio) == string {\n        $width: null;\n        $height: null;\n        @if str-index($ratio, \"/\") {\n          $fslash-index: str-index($ratio, \"/\");\n          $width: __convertToNumber(str-slice($ratio, 1, $fslash-index - 1));\n          $height: __convertToNumber(str-slice($ratio, $fslash-index + 1));\n        } @else if str-index($ratio, \":\") {\n          $colon-index: str-index($ratio, \":\");\n          $width: __convertToNumber(str-slice($ratio, 1, $colon-index - 1));\n          $height: __convertToNumber(str-slice($ratio, $colon-index + 1));\n        }\n        $calc: ($height / $width) * 100;\n        padding-top: #{$calc * 1%};\n      } @else if type-of($ratio) == number {\n        padding-top: (1 / $ratio) * 100%;\n      }\n    }\n  }\n  & > * {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n  }\n}\n\n\n\n@mixin gls-scissors($corners) {\n  @if length($corners) == 1 {\n    $corners: __validateScissors($corners);\n    clip-path: polygon(\n      0 #{nth($corners, 1)},\n      #{nth($corners, 1)} 0,\n      calc(100% - #{nth($corners, 1)}) 0,\n      100% #{nth($corners, 1)},\n      100% calc(100% - #{nth($corners, 1)}),\n      calc(100% - #{nth($corners, 1)}) 100%,\n      #{nth($corners, 1)} 100%,\n      0 calc(100% - #{nth($corners, 1)})\n    );\n  } @else if length($corners) == 4 {\n    $corners: __validateScissors($corners);\n    clip-path: polygon(\n      0 #{nth($corners, 1)},\n      #{nth($corners, 1)} 0,\n      calc(100% - #{nth($corners, 2)}) 0,\n      100% #{nth($corners, 2)},\n      100% calc(100% - #{nth($corners, 3)}),\n      calc(100% - #{nth($corners, 3)}) 100%,\n      #{nth($corners, 4)} 100%,\n      0 calc(100% - #{nth($corners, 4)})\n    );\n  }\n}\n\n\n\n@mixin gls-screen-agent($resolution) {\n  @if $resolution == \"1x\" {\n    @media (min-resolution: 96dpi) {\n      @content;\n    }\n  } @else if $resolution == \"2x\" {\n    @media (min-resolution: 192dpi) {\n      @content;\n    }\n  } @else if $resolution == \"3x\" {\n    @media (min-resolution: 288dpi) {\n      @content;\n    }\n  } @else {\n    @media (min-resolution: #{$resolution}) {\n      @content;\n    }\n  }\n}\n\n\n\n@mixin gls-sizer($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n\n\n@mixin gls-smartphone($device, $orientation: null) {\n  @if map-has-key($map-for-smartphones, $device) {\n    @if $orientation == portrait or $orientation == null {\n      @media only screen \n      and (device-width: __mapDeepGet($map-for-smartphones, $device, 'width')) \n      and (device-height: __mapDeepGet($map-for-smartphones, $device, 'height'))\n      and (orientation: portrait) {\n        @content;\n      }\n    } @else if $orientation == landscape {\n      @media only screen \n      and (device-width: __mapDeepGet($map-for-smartphones, $device, 'height')) \n      and (device-height: __mapDeepGet($map-for-smartphones, $device, 'width'))\n      and (orientation: landscape) {\n        @content;\n      }\n    }\n  } @else {\n    @warn \"#{$device} is a wrong device name! The argument must be one of the followings: #{map-keys($map-for-smartphones)}\";\n  }\n}\n\n\n\n@mixin gls-sprite($params...) {\n  @if length($params) == 1 {\n    @if type-of(nth($params, 1)) == \"string\" {\n      $str-length: str-length(nth($params, 1));\n      $str-end: str-slice(nth($params, 1), $str-length - 3);\n      @if index(\".png\" \".jpg\" \".svg\", $str-end) {\n        $image-url: nth($params, 1);\n        display: inline-block;\n        background-image: url($image-url);\n        background-repeat: no-repeat;\n      }\n    } @else {\n      $position: nth($params, 1);\n      background-position: $position;\n    }\n  } @else if length($params) == 2 {\n    $image-url: nth($params, 1);\n    $position: nth($params, 2);\n    display: inline-block;\n    background-image: url($image-url);\n    background-position: $position;\n    background-repeat: no-repeat;\n  }\n  @content;\n}\n\n\n\n@mixin gls-stretched-link($value: \"before\") {\n  @if index(\"before\" \"after\", $value) {\n    &#{\"::\" + $value} {\n      content: \"\";\n      position: absolute;\n      pointer-events: auto;\n      background-color: rgba(0, 0, 0, 0);\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      z-index: 1;\n    }\n  } @else {\n    @error \"'#{$value}' is a wrong argument. This mixin accepts 'before' or 'after' as an argument. If you don't pass any argument default it will target the '::before' pseudo-element of the selected element.\";\n  }\n}\n\n\n\n@mixin gls-tablet($device, $orientation: null) {\n  @if map-has-key($map-for-tablets, $device) {\n    @if $orientation == portrait or $orientation == null {\n      @media only screen \n      and (device-width: __mapDeepGet($map-for-tablets, $device, 'width')) \n      and (device-height: __mapDeepGet($map-for-tablets, $device, 'height'))\n      and (orientation: portrait) {\n        @content;\n      }\n    } @else if $orientation == landscape {\n      @media only screen \n      and (device-width: __mapDeepGet($map-for-tablets, $device, 'height')) \n      and (device-height: __mapDeepGet($map-for-tablets, $device, 'width'))\n      and (orientation: landscape) {\n        @content;\n      }\n    }\n  } @else {\n    @warn \"#{$device} is a wrong device name! The argument must be one of the followings: #{map-keys($map-for-tablets)}\";\n  }\n}\n\n\n\n@mixin gls-text-gradient($direction, $colors) {\n  $list: ();\n  @for $i from 1 through length($colors) {\n    $list: append($list, nth($colors, $i), comma);\n  }\n  @if map-has-key($map-for-directions, $direction) {\n    background: linear-gradient(\n      map-get($map-for-directions, $direction),\n      $list\n    );\n  } @else if not map-has-key($map-for-directions, $direction) {\n    @if not index(\"deg\", unit($direction)) {\n      @error \"#{$direction} is a wrong value for the $direction parameter. The value must be eighter a number followed by the 'deg' unit or one of the followings: #{map-keys($map-for-directions)}.\";\n    } @else {\n      background: linear-gradient($direction, $list);\n    }\n  }\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  color: transparent;\n}\n\n\n\n@mixin gls-text-image($image: null) {\n  @if $image {\n    background-image: url($image);\n  }\n  background-size: cover;\n  background-position: center;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  color: transparent;\n}\n\n\n\n@mixin gls-text-selection($value: null) {\n  @if not & and $value == null {\n    ::selection {\n      @content;\n    }\n  } @else if & and $value == \"only\" {\n    &::selection {\n      @content;\n    }\n  } @else if & and $value == null {\n    &::selection,\n    *::selection {\n      @content;\n    }\n  }\n}\n\n\n\n@mixin gls-text-shadow($params...) {\n  $value: ();\n\n  @for $i from 1 through length($params) {\n    // Takes each items come from $params.\n    $item: nth($params, $i);\n\n    // The first value comes from the $item is direction.\n    // This will be used in the @if, @else statements with $size to control the offset of the shadows.\n    $direction: nth($item, 1);\n\n    // Second value is the color.\n    $color: nth($item, 2);\n\n    // The third value is the actual offset value of the shadows.\n    $size: nth($item, 3);\n\n    // Takes the unit of the $size value to use it later to increment the amount of shadow based on the unit.\n    $sizeUnit: unit($size);\n\n    // The $blur argument is optional. It controls the size of the blur.\n    $blur: null;\n\n    // The $fill argument is optional. This makes shadow fill the gap between the actual text and shadow's end-point. The default value is set to false.\n    $fill: null;\n\n    // Assigns the optional sub-arguments to the actual argument.\n    @if length($item) == 4 and type-of(nth($item, 4)) == number {\n      $blur: nth($item, length($item));\n    } @else if length($item) == 4 and type-of(nth($item, 4)) == bool {\n      $fill: nth($item, length($item));\n    } @else if length($item) == 5 {\n      $blur: nth($item, 4);\n      $fill: nth($item, length($item));\n    }\n\n    // The code below changes the angle of $direction of the shadow based on the predefined values.\n    @if $direction == \"top\" {\n      @if $fill == true {\n        // The __clearUnit(); function is used here due to it is not possible to count $size with a unit. First, it clears the unit from the $size argument and then adds it back again in the @for loop.\n        @for $i from 1 through __clearUnit($size) {\n          $increase: $i * 1 + $sizeUnit;\n          $shadow: 0 -#{$increase} $blur $color;\n          $value: append($value, $shadow, comma);\n        }\n      } @else {\n        $shadow: 0 -#{$size} $blur $color;\n        $value: append($value, $shadow, comma);\n      }\n    } @else if $direction == \"top-left\" {\n      @if $fill == true {\n        @for $i from 1 through __clearUnit($size) {\n          $increase: $i * 1 + $sizeUnit;\n          $shadow: -#{$increase} -#{$increase} $blur $color;\n          $value: append($value, $shadow, comma);\n        }\n      } @else {\n        $shadow: -#{$size} -#{$size} $blur $color;\n        $value: append($value, $shadow, comma);\n      }\n    } @else if $direction == \"top-right\" {\n      @if $fill == true {\n        @for $i from 1 through __clearUnit($size) {\n          $increase: $i * 1 + $sizeUnit;\n          $shadow: #{$increase} -#{$increase} $blur $color;\n          $value: append($value, $shadow, comma);\n        }\n      } @else {\n        $shadow: #{$size} -#{$size} $blur $color;\n        $value: append($value, $shadow, comma);\n      }\n    } @else if $direction == \"bottom\" {\n      @if $fill == true {\n        @for $i from 1 through __clearUnit($size) {\n          $increase: $i * 1 + $sizeUnit;\n          $shadow: 0 #{$increase} $blur $color;\n          $value: append($value, $shadow, comma);\n        }\n      } @else {\n        $shadow: 0 #{$size} $blur $color;\n        $value: append($value, $shadow, comma);\n      }\n    } @else if $direction == \"bottom-left\" {\n      @if $fill == true {\n        @for $i from 1 through __clearUnit($size) {\n          $increase: $i * 1 + $sizeUnit;\n          $shadow: -#{$increase} #{$increase} $blur $color;\n          $value: append($value, $shadow, comma);\n        }\n      } @else {\n        $shadow: -#{$size} #{$size} $blur $color;\n        $value: append($value, $shadow, comma);\n      }\n    } @else if $direction == \"bottom-right\" {\n      @if $fill == true {\n        @for $i from 1 through __clearUnit($size) {\n          $increase: $i * 1 + $sizeUnit;\n          $shadow: #{$increase} #{$increase} $blur $color;\n          $value: append($value, $shadow, comma);\n        }\n      } @else {\n        $shadow: #{$size} #{$size} $blur $color;\n        $value: append($value, $shadow, comma);\n      }\n    } @else if $direction == \"left\" {\n      @if $fill == true {\n        @for $i from 1 through __clearUnit($size) {\n          $increase: $i * 1 + $sizeUnit;\n          $shadow: -#{$increase} 0 $blur $color;\n          $value: append($value, $shadow, comma);\n        }\n      } @else {\n        $shadow: -#{$size} 0 $blur $color;\n        $value: append($value, $shadow, comma);\n      }\n    } @else if $direction == \"right\" {\n      @if $fill == true {\n        @for $i from 1 through __clearUnit($size) {\n          $increase: $i * 1 + $sizeUnit;\n          $shadow: #{$increase} 0 $blur $color;\n          $value: append($value, $shadow, comma);\n        }\n      } @else {\n        $shadow: #{$size} 0 $blur $color;\n        $value: append($value, $shadow, comma);\n      }\n    }\n  }\n  text-shadow: $value;\n}\n\n\n\n@mixin gls-text-stroke(\n  $fallback-color: black,\n  $color: transparent,\n  $stroke-color: black,\n  $stroke-width: 1px\n) {\n  color: $fallback-color;\n  -webkit-text-fill-color: $color;\n  -webkit-text-stroke-color: $stroke-color;\n  -webkit-text-stroke-width: $stroke-width;\n}\n\n\n\n@mixin gls-triangle($direction: \"bottom\", $color: black, $size: 10px 8px) {\n  @if index($list-of-directions, $direction) {\n    @if __isColor($color){\n      content: \"\";\n      height: 0;\n      width: 0;\n      display: inline-block;\n      border-style: solid;\n      @if $direction == \"top\"{\n        border-color: transparent transparent $color;\n        border-width: 0 (nth($size, 1) / 2) if(length($size) == 2, nth($size, 2), nth($size, 1));\n      } @else if $direction == \"top-right\" {\n        border-color: transparent $color transparent transparent;\n        border-width: 0 nth($size, 1) nth($size, 1) 0;\n      } @else if $direction == \"right\" {\n        border-color: transparent transparent transparent $color;\n        border-width: (if(length($size) == 2, nth($size, 2), nth($size, 1)) / 2) 0 (if(length($size) == 2, nth($size, 2), nth($size, 1)) / 2) nth($size, 1);\n      } @else if $direction == \"bottom-right\" {\n        border-color: transparent transparent $color;\n        border-width: 0 0 nth($size, 1) nth($size, 1);\n      } @else if $direction == \"bottom\" {\n        border-color: $color transparent transparent;\n        border-width: if(length($size) == 2, nth($size, 2), nth($size, 1)) (nth($size, 1) / 2) 0;\n      } @else if $direction == \"bottom-left\" {\n        border-color: transparent transparent transparent $color;\n        border-width: nth($size, 1) 0 0 nth($size, 1);\n      } @else if $direction == \"left\" {\n        border-color: transparent $color transparent transparent;\n        border-width: (if(length($size) == 2, nth($size, 2), nth($size, 1)) / 2) nth($size, 1) (if(length($size) == 2, nth($size, 2), nth($size, 1)) / 2) 0;\n      } @else if $direction == \"top-left\" {\n        border-color: $color transparent transparent;\n        border-width: nth($size, 1) nth($size, 1) 0 0;\n      }\n      @content;\n    }\n  } @else {\n    @error \"The argument for direction must be one of the followings: #{quote($list-of-directions)}\";\n  }\n}\n","// Defaults and variables\n@import 'modularscale/vars';\n\n// Core functions\n@import 'modularscale/settings';\n@import 'modularscale/pow';\n@import 'modularscale/strip-units';\n@import 'modularscale/sort';\n@import 'modularscale/target';\n@import 'modularscale/function';\n@import 'modularscale/round-px';\n\n// Mixins\n@import 'modularscale/respond';\n\n// Syntax sugar\n@import 'modularscale/sugar';","// Ratios\n$double-octave    : 4                 ;\n$pi               : 3.14159265359     ;\n$major-twelfth    : 3                 ;\n$major-eleventh   : 2.666666667       ;\n$major-tenth      : 2.5               ;\n$octave           : 2                 ;\n$major-seventh    : 1.875             ;\n$minor-seventh    : 1.777777778       ;\n$major-sixth      : 1.666666667       ;\n$phi              : 1.618034          ;\n$golden           : $phi              ;\n$minor-sixth      : 1.6               ;\n$fifth            : 1.5               ;\n$augmented-fourth : 1.41421           ;\n$fourth           : 1.333333333       ;\n$major-third      : 1.25              ;\n$minor-third      : 1.2               ;\n$major-second     : 1.125             ;\n$minor-second     : 1.066666667       ;\n\n// Base config\n$ms-base          : 1em       !default;\n$ms-ratio         : $fifth    !default;\n$modularscale     : ()        !default;","// Parse settings starting with defaults.\n// Settings should cascade down like you would expect in CSS.\n// More specific overrides previous settings.\n\n@function ms-settings($b: false, $r: false, $t: false, $m: $modularscale) {\n  $base: $ms-base;\n  $ratio: $ms-ratio;\n  $thread: map-get($m, $t);\n\n  // Override with user settings\n  @if map-get($m, base) {\n    $base: map-get($m, base);\n  }\n  @if map-get($m, ratio) {\n    $ratio: map-get($m, ratio);\n  }\n\n  // Override with thread settings\n  @if $thread {\n    @if map-get($thread, base) {\n      $base: map-get($thread, base);\n    }\n    @if map-get($thread, ratio) {\n      $ratio: map-get($thread, ratio);\n    }\n  }\n\n  // Override with inline settings\n  @if $b {\n    $base: $b;\n  }\n  @if $r {\n    $ratio: $r;\n  }\n\n  @return $base $ratio;\n}","// Sass does not have native pow() support so this needs to be added.\n// Compass and other libs implement this more extensively.\n// In order to keep this simple, use those when they are avalible.\n// Issue for pow() support in Sass: https://github.com/sass/sass/issues/684\n\n@function ms-pow($b,$e) {\n\n  // Return 1 if exponent is 0\n  @if $e == 0 {\n    @return 1;\n  }\n\n  // If pow() exists (compass or mathsass) use that.\n  @if function-exists('pow') {\n    @return pow($b,$e);\n  }\n\n  // This does not support non-integer exponents,\n  // Check and return an error if a non-integer exponent is passed.\n  @if (floor($e) != $e) {\n    @error 'Non-integer values are not supported in modularscale by default. Try using mathsass in your project to add non-integer scale support. https://github.com/terkel/mathsass'\n  }\n\n  // Seed the return.\n  $ms-return: $b;\n\n  // Multiply or divide by the specified number of times.\n  @if $e > 0 {\n    @for $i from 1 to $e {\n      $ms-return: $ms-return * $b;\n    }\n  }\n  @if $e < 0 {\n    @for $i from $e through 0 {\n      $ms-return: $ms-return / $b;\n    }\n  }\n  @return $ms-return;\n}","// Stripping units is not a best practice\n// This function should not be used elsewhere\n// It is used here because calc() doesn't do unit logic\n// AND target ratios use units as a hack to get a number.\n@function ms-unitless($val) {\n  @return ($val / ($val - $val + 1));\n}","// Basic list sorting\n// Would like to replace with http://sassmeister.com/gist/30e4863bd03ce0e1617c\n// Unfortunately libsass has a bug with passing arguments into the min() funciton.\n\n@function ms-sort($l) {\n\n  // loop until the list is confirmed to be sorted\n  $sorted: false;\n  @while $sorted == false {\n\n    // Start with the assumption that the lists are sorted.\n    $sorted: true;\n\n    // Loop through the list, checking each value with the one next to it.\n    // Swap the values if they need to be swapped.\n    // Not super fast but simple and modular scale doesn't lean hard on sorting.\n    @for $i from 2 through length($l) {\n      $n1: nth($l,$i - 1);\n      $n2: nth($l,$i);\n\n      // If the first value is greater than the 2nd, swap them.\n      @if $n1 > $n2 {\n        $l: set-nth($l, $i, $n1);\n        $l: set-nth($l, $i - 1, $n2);\n\n        // The list isn't sorted and needs to be looped through again.\n        $sorted: false;\n      }\n    }\n  }\n\n  // Return the sorted list.\n  @return $l;\n}","// Convert number string to number\n@function ms-to-num($n) {\n  $l: str-length($n);\n  $r: 0;\n  $m: str-index($n,'.');\n  @if $m == null {\n    $m: $l + 1;\n  }\n  // Loop through digits and convert to numbers\n  @for $i from 1 through $l {\n    $v: str-slice($n,$i,$i);\n    @if $v == '1' { $v: 1; }\n    @else if $v == '2' { $v: 2; }\n    @else if $v == '3' { $v: 3; }\n    @else if $v == '4' { $v: 4; }\n    @else if $v == '5' { $v: 5; }\n    @else if $v == '6' { $v: 6; }\n    @else if $v == '7' { $v: 7; }\n    @else if $v == '8' { $v: 8; }\n    @else if $v == '9' { $v: 9; }\n    @else if $v == '0' { $v: 0; }\n    @else { $v: null; }\n    @if $v != null {\n      $m: $m - 1;\n      $r: $r + ms-pow(10,$m - 1) * $v;\n    } @else {\n      $l: $l - 1;\n    }\n  }\n  @return $r;\n}\n\n// Find a ratio based on a target value\n@function ms-target($t,$b) {\n  // Convert to string\n  $t: $t + '';\n  // Remove base units to calulate ratio\n  $b: ms-unitless(nth($b,1));\n  // Find where 'at' is in the string\n  $at: str-index($t,'at');\n\n  // Slice the value and target out\n  // and convert strings to numbers\n  $v: ms-to-num(str-slice($t,0,$at - 1));\n  $t: ms-to-num(str-slice($t,$at + 2));\n\n  // Solve the modular scale function for the ratio.\n  @return ms-pow(($v/$b),(1/$t));\n}","@function ms-function($v: 0, $base: false, $ratio: false, $thread: false, $settings: $modularscale) {\n\n  // Parse settings\n  $ms-settings: ms-settings($base,$ratio,$thread,$settings);\n  $base: nth($ms-settings, 1);\n  $ratio: nth($ms-settings, 2);\n\n  // Render target values from settings.\n  @if unit($ratio) != '' {\n    $ratio: ms-target($ratio,$base)\n  }\n\n  // Fast calc if not multi stranded\n  @if(length($base) == 1) {\n    @return ms-pow($ratio, $v) * $base;\n  }\n\n  // Create new base array\n  $ms-bases: nth($base,1);\n\n  // Normalize base values\n  @for $i from 2 through length($base) {\n    // initial base value\n    $ms-base: nth($base,$i);\n    // If the base is bigger than the main base\n    @if($ms-base > nth($base,1)) {\n      // divide the value until it aligns with main base.\n      @while($ms-base > nth($base,1)) {\n        $ms-base: $ms-base / $ratio;\n      }\n      $ms-base: $ms-base * $ratio;\n    }\n    // If the base is smaller than the main base.\n    @else if ($ms-base < nth($base,1)) {\n      // pump up the value until it aligns with main base.\n      @while $ms-base < nth($base,1) {\n        $ms-base: $ms-base * $ratio;\n      }\n    }\n    // Push into new array\n    $ms-bases: append($ms-bases,$ms-base);\n  }\n\n  // Sort array from smallest to largest.\n  $ms-bases: ms-sort($ms-bases);\n\n  // Find step to use in calculation\n  $vtep: floor($v / length($ms-bases));\n  // Find base to use in calculation\n  $ms-base: round(($v / length($ms-bases) - $vtep) * length($ms-bases)) + 1;\n\n  @return ms-pow($ratio, $vtep) * nth($ms-bases,$ms-base);\n}","@function ms-round-px($r) {\n    @if unit($r) == 'px' {\n        @return round($r);\n    }\n    @warn \"ms-round-px is no longer used by modular scale and will be removed in the 3.1.0 release.\";\n    @return $r;\n}","// Generate calc() function\n// based on Mike Riethmuller's Precise control over responsive typography\n// http://madebymike.com.au/writing/precise-control-responsive-typography/\n@function ms-fluid($val1: 1em, $val2: 1em, $break1: 0, $break2: 0) {\n  $diff: ms-unitless($val2) - ms-unitless($val1);\n\n  // v1 + (v2 - v1) * ( (100vw - b1) / b2 - b1 )\n  @return calc( #{$val1} + #{ms-unitless($val2) - ms-unitless($val1)} * ( ( 100vw - #{$break1}) / #{ms-unitless($break2) - ms-unitless($break1)} ) );\n}\n\n// Main responsive mixin\n@mixin ms-respond($prop, $val, $map: $modularscale, $ms-important: false) {\n  $base: $ms-base;\n  $ratio: $ms-ratio;\n\n  $first-write: true;\n  $last-break: null;\n\n  $important: '';\n\n  @if $ms-important == true {\n    $important: ' !important';\n  }\n\n  // loop through all settings with a breakpoint type value\n  @each $v, $s in $map {\n    @if type-of($v) == number {\n      @if unit($v) != '' {\n\n        // Write out the first value without a media query.\n        @if $first-write {\n          #{$prop}: unquote(\"#{ms-function($val, $thread: $v, $settings: $map)}#{$important}\");\n\n          // Not the first write anymore, reset to false to move on.\n          $first-write: false;\n          $last-break: $v;\n        }\n\n        // Write intermediate breakpoints.\n        @else {\n          @media (min-width: $last-break) and (max-width: $v) {\n            $val1: ms-function($val, $thread: $last-break, $settings: $map);\n            $val2: ms-function($val, $thread: $v, $settings: $map);\n            #{$prop}: unquote(\"#{ms-fluid($val1,$val2,$last-break,$v)}#{$important}\");\n          }\n          $last-break: $v;\n        }\n      }\n    }\n  }\n\n  // Write the last breakpoint.\n  @if $last-break {\n    @media (min-width: $last-break) {\n      #{$prop}: unquote(\"#{ms-function($val, $thread: $last-break, $settings: $map)}#{$important}\");\n    }\n  }\n}","// To attempt to avoid conflicts with other libraries\n// all funcitons are namespaced with `ms-`.\n// However, to increase usability, a shorthand function is included here.\n\n@function ms($v: 0, $base: false, $ratio: false, $thread: false, $settings: $modularscale) {\n  @return ms-function($v, $base, $ratio, $thread, $settings);\n}"],"names":[],"mappings":"ACCA,OAAO,CAAC,sKAAI;AAaZ,AAAA,IAAI,CAAC;EACH,WAAW,EAAE,mBAAmB;EAChC,WAAW,EAXA,mBAAmB,EAAE,UAAU;EAY1C,SAAS,EAAE,IAAI;EACf,WAAW,EAAE,IAAI;EACjB,KAAK,EAAE,IAAI;EACX,UAAU,EAAE,MAAM;EAClB,WAAW,EAAE,GAAG,GACjB;;AAED,AAAA,UAAU,CAAC;EACT,SAAS,EAAE,MAAM,GAClB;;AACD,AAAA,WAAW,CAAC;EACV,SAAS,E2FdC,SAA0B,G3FerC;;AACD,AAAA,CAAC,CAAC;EACA,MAAM,EAAE,UAAU;EAClB,WAAW,EA5BL,cAAc,EAAE,KAAK,GA6B5B;;AAED,AAAA,EAAE;AACF,GAAG,CAAC;EACF,SAAS,E2FvBC,OAA0B;E3FwBpC,KAAK,EAhCO,IAAI,GAiCjB;;AAED,AAAA,EAAE;AACF,GAAG,CAAC;EACF,SAAS,E2F7BC,MAA0B;E3F8BpC,KAAK,EAtCO,IAAI,GAuCjB;;AAED,AAAA,EAAE;AACF,GAAG,CAAC;EACF,SAAS,E2FnCC,KAA0B;E3FoCpC,KAAK,EA5CO,IAAI,GA6CjB;;AAED,AAAA,EAAE;AACF,GAAG,CAAC;EACF,SAAS,E2FzCC,KAA0B;E3F0CpC,KAAK,EAlDO,IAAI,GAmDjB;;AACD,AAAA,gBAAgB,CAAC,CAAC;AAClB,gBAAgB,CAAC,CAAC,AAAA,MAAM;AACxB,gBAAgB,CAAC,CAAC,AAAA,MAAM;AACxB,gBAAgB,CAAC,CAAC,AAAA,OAAO;AACzB,gBAAgB,CAAC,CAAC,AAAA,YAAY,CAAC;EAC7B,WAAW,EAAE,GAAG,GACjB;;AACD,AAAA,oBAAoB,CAAC,CAAC,CAAC;EACrB,SAAS,E2FpDC,KAA0B,G3FqDrC;;AACD,AAAA,UAAU,CAAC;E4CjET,OAAO,EAAE,YAAY;EACrB,QAAQ,EAAE,QAAQ;EAClB,KAAK,E5CiEK,KAAK;E4ChEf,MAAM,E5CiEK,IAAI;E4C/Db,gBAAgB,EAAE,+BAAe;EAEnC,mBAAmB,EAAE,MAAM;EAC3B,iBAAiB,EAAE,SAAS;EAC5B,eAAe,EAAE,IAAI,G5C8DtB;EAND,A4CvDE,U5CuDQ,C4CvDR,CAAC,CAAC;IACA,OAAO,EAAE,KAAK;IACd,KAAK,EAAE,GAAG;IACV,MAAM,EAAE,GAAG;IACX,QAAQ,EAAE,MAAM;IAChB,WAAW,EAAE,IAAI,GAElB;I5CgDH,AmFkoCI,UnFloCM,C4CvDR,CAAC,AuCyrCE,OAAO,CAAU;MAChB,OAAO,EAAE,EAAE;MACX,QAAQ,EAAE,QAAQ;MAClB,cAAc,EAAE,IAAI;MACpB,gBAAgB,EAAE,gBAAgB;MAClC,GAAG,EAAE,CAAC;MACN,KAAK,EAAE,CAAC;MACR,MAAM,EAAE,CAAC;MACT,IAAI,EAAE,CAAC;MACP,OAAO,EAAE,CAAC,GACX"}